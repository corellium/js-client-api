/**
 * Corellium API
 * REST API to manage your virtual devices.
 *
 * The version of the OpenAPI document: 7.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CorelliumClient);
  }
}(this, function(expect, CorelliumClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CorelliumClient.ConfigResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ConfigResponse', function() {
    it('should create an instance of ConfigResponse', function() {
      // uncomment below and update the code to test ConfigResponse
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be.a(CorelliumClient.ConfigResponse);
    });

    it('should have the property onSite (base name: "onSite")', function() {
      // uncomment below and update the code to test the property onSite
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property showDomainSettings (base name: "showDomainSettings")', function() {
      // uncomment below and update the code to test the property showDomainSettings
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property invalidBuild (base name: "invalidBuild")', function() {
      // uncomment below and update the code to test the property invalidBuild
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property sepSim (base name: "sepSim")', function() {
      // uncomment below and update the code to test the property sepSim
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property installerAvailable (base name: "installerAvailable")', function() {
      // uncomment below and update the code to test the property installerAvailable
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property invoicedPublishableKey (base name: "invoicedPublishableKey")', function() {
      // uncomment below and update the code to test the property invoicedPublishableKey
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property stripePublicKey (base name: "stripePublicKey")', function() {
      // uncomment below and update the code to test the property stripePublicKey
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property intercomId (base name: "intercomId")', function() {
      // uncomment below and update the code to test the property intercomId
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property auxWebhook (base name: "auxWebhook")', function() {
      // uncomment below and update the code to test the property auxWebhook
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property gtmId (base name: "gtmId")', function() {
      // uncomment below and update the code to test the property gtmId
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property zapierFeedbackWebhook (base name: "zapierFeedbackWebhook")', function() {
      // uncomment below and update the code to test the property zapierFeedbackWebhook
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property zapierBugsWebhook (base name: "zapierBugsWebhook")', function() {
      // uncomment below and update the code to test the property zapierBugsWebhook
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property billingBackend (base name: "billingBackend")', function() {
      // uncomment below and update the code to test the property billingBackend
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property maintenance (base name: "maintenance")', function() {
      // uncomment below and update the code to test the property maintenance
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property logging (base name: "logging")', function() {
      // uncomment below and update the code to test the property logging
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property cloudAdmin (base name: "cloudAdmin")', function() {
      // uncomment below and update the code to test the property cloudAdmin
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property filesAdmin (base name: "filesAdmin")', function() {
      // uncomment below and update the code to test the property filesAdmin
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property cloudDomain (base name: "cloudDomain")', function() {
      // uncomment below and update the code to test the property cloudDomain
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property billingDomain (base name: "billingDomain")', function() {
      // uncomment below and update the code to test the property billingDomain
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property appDomain (base name: "appDomain")', function() {
      // uncomment below and update the code to test the property appDomain
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property maxNetworkMonitorFileSize (base name: "maxNetworkMonitorFileSize")', function() {
      // uncomment below and update the code to test the property maxNetworkMonitorFileSize
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property enableFirmwareImageUpload (base name: "enableFirmwareImageUpload")', function() {
      // uncomment below and update the code to test the property enableFirmwareImageUpload
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property authProviders (base name: "authProviders")', function() {
      // uncomment below and update the code to test the property authProviders
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property snapshotLimit (base name: "snapshotLimit")', function() {
      // uncomment below and update the code to test the property snapshotLimit
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property maxKernelSize (base name: "maxKernelSize")', function() {
      // uncomment below and update the code to test the property maxKernelSize
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property maxRamdiskSize (base name: "maxRamdiskSize")', function() {
      // uncomment below and update the code to test the property maxRamdiskSize
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property charmSDK (base name: "charmSDK")', function() {
      // uncomment below and update the code to test the property charmSDK
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property trial (base name: "trial")', function() {
      // uncomment below and update the code to test the property trial
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property sentryUrl (base name: "sentryUrl")', function() {
      // uncomment below and update the code to test the property sentryUrl
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property domainAuthenticationProviders (base name: "domainAuthenticationProviders")', function() {
      // uncomment below and update the code to test the property domainAuthenticationProviders
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

    it('should have the property defaultSsid (base name: "defaultSsid")', function() {
      // uncomment below and update the code to test the property defaultSsid
      //var instance = new CorelliumClient.ConfigResponse();
      //expect(instance).to.be();
    });

  });

}));

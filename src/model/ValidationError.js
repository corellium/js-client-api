/**
 * Corellium API
 * REST API to manage your virtual devices.
 *
 * The version of the OpenAPI document: 4.5.0-16775
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ValidationError model module.
 * @module model/ValidationError
 * @version 0.3.2
 */
class ValidationError {
    /**
     * Constructs a new <code>ValidationError</code>.
     * 
     * @alias module:model/ValidationError
     * @param error {String} Error text
     * @param errorID {module:model/ValidationError.ErrorIDEnum} Error ID
     */
    constructor(error, errorID) { 
        
        ValidationError.initialize(this, error, errorID);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, error, errorID) { 
        obj['error'] = error;
        obj['errorID'] = errorID;
    }

    /**
     * Constructs a <code>ValidationError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ValidationError} obj Optional instance to populate.
     * @return {module:model/ValidationError} The populated <code>ValidationError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ValidationError();

            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('errorID')) {
                obj['errorID'] = ApiClient.convertToType(data['errorID'], 'String');
            }
            if (data.hasOwnProperty('field')) {
                obj['field'] = ApiClient.convertToType(data['field'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ValidationError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ValidationError</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ValidationError.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }
        // ensure the json data is a string
        if (data['errorID'] && !(typeof data['errorID'] === 'string' || data['errorID'] instanceof String)) {
            throw new Error("Expected the field `errorID` to be a primitive type in the JSON string but got " + data['errorID']);
        }
        // ensure the json data is a string
        if (data['field'] && !(typeof data['field'] === 'string' || data['field'] instanceof String)) {
            throw new Error("Expected the field `field` to be a primitive type in the JSON string but got " + data['field']);
        }

        return true;
    }


}

ValidationError.RequiredProperties = ["error", "errorID"];

/**
 * Error text
 * @member {String} error
 */
ValidationError.prototype['error'] = undefined;

/**
 * Error ID
 * @member {module:model/ValidationError.ErrorIDEnum} errorID
 */
ValidationError.prototype['errorID'] = undefined;

/**
 * Field associated with error
 * @member {String} field
 */
ValidationError.prototype['field'] = undefined;





/**
 * Allowed values for the <code>errorID</code> property.
 * @enum {String}
 * @readonly
 */
ValidationError['ErrorIDEnum'] = {

    /**
     * value: "ValidationError"
     * @const
     */
    "ValidationError": "ValidationError"
};



export default ValidationError;


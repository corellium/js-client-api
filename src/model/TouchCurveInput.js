/**
 * Corellium API
 * REST API to manage your virtual devices.
 *
 * The version of the OpenAPI document: 7.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TouchInputButtonsInner from './TouchInputButtonsInner';

/**
 * The TouchCurveInput model module.
 * @module model/TouchCurveInput
 * @version 0.4.1
 */
class TouchCurveInput {
    /**
     * Constructs a new <code>TouchCurveInput</code>.
     * 
     * @alias module:model/TouchCurveInput
     * @param start {Object} Finger Positions
     * @param end {Object} Finger Positions
     * @param startButtons {Array.<module:model/TouchInputButtonsInner>} Buttons to be held during this curve.
     * @param duration {Number} Duration to execute this curve over.
     */
    constructor(start, end, startButtons, duration) { 
        
        TouchCurveInput.initialize(this, start, end, startButtons, duration);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, start, end, startButtons, duration) { 
        obj['start'] = start;
        obj['end'] = end;
        obj['startButtons'] = startButtons;
        obj['duration'] = duration;
    }

    /**
     * Constructs a <code>TouchCurveInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TouchCurveInput} obj Optional instance to populate.
     * @return {module:model/TouchCurveInput} The populated <code>TouchCurveInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TouchCurveInput();

            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], Object);
            }
            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], Object);
            }
            if (data.hasOwnProperty('bezierPoints')) {
                obj['bezierPoints'] = ApiClient.convertToType(data['bezierPoints'], [Object]);
            }
            if (data.hasOwnProperty('startButtons')) {
                obj['startButtons'] = ApiClient.convertToType(data['startButtons'], [TouchInputButtonsInner]);
            }
            if (data.hasOwnProperty('endButtons')) {
                obj['endButtons'] = ApiClient.convertToType(data['endButtons'], [TouchInputButtonsInner]);
            }
            if (data.hasOwnProperty('normalized')) {
                obj['normalized'] = ApiClient.convertToType(data['normalized'], 'Boolean');
            }
            if (data.hasOwnProperty('wait')) {
                obj['wait'] = ApiClient.convertToType(data['wait'], 'Number');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TouchCurveInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TouchCurveInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TouchCurveInput.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['bezierPoints'])) {
            throw new Error("Expected the field `bezierPoints` to be an array in the JSON data but got " + data['bezierPoints']);
        }
        if (data['startButtons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['startButtons'])) {
                throw new Error("Expected the field `startButtons` to be an array in the JSON data but got " + data['startButtons']);
            }
            // validate the optional field `startButtons` (array)
            for (const item of data['startButtons']) {
                TouchInputButtonsInner.validateJSON(item);
            };
        }
        if (data['endButtons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['endButtons'])) {
                throw new Error("Expected the field `endButtons` to be an array in the JSON data but got " + data['endButtons']);
            }
            // validate the optional field `endButtons` (array)
            for (const item of data['endButtons']) {
                TouchInputButtonsInner.validateJSON(item);
            };
        }

        return true;
    }


}

TouchCurveInput.RequiredProperties = ["start", "end", "startButtons", "duration"];

/**
 * Finger Positions
 * @member {Object} start
 */
TouchCurveInput.prototype['start'] = undefined;

/**
 * Finger Positions
 * @member {Object} end
 */
TouchCurveInput.prototype['end'] = undefined;

/**
 * array of per-finger intermediate touch positions, up to 10 depending on model.  Straight line if not defined.
 * @member {Array.<Object>} bezierPoints
 */
TouchCurveInput.prototype['bezierPoints'] = undefined;

/**
 * Buttons to be held during this curve.
 * @member {Array.<module:model/TouchInputButtonsInner>} startButtons
 */
TouchCurveInput.prototype['startButtons'] = undefined;

/**
 * Buttons to be left held after this curve.  Same as startButtons if not defined.
 * @member {Array.<module:model/TouchInputButtonsInner>} endButtons
 */
TouchCurveInput.prototype['endButtons'] = undefined;

/**
 * true if you want to use normalized x,y coordinates from 0-10000 (eg 5000,5000 is always center of screen)
 * @member {Boolean} normalized
 */
TouchCurveInput.prototype['normalized'] = undefined;

/**
 * Duration to wait before this input is executed.  Instant if not defined.
 * @member {Number} wait
 */
TouchCurveInput.prototype['wait'] = undefined;

/**
 * Duration to execute this curve over.
 * @member {Number} duration
 */
TouchCurveInput.prototype['duration'] = undefined;






export default TouchCurveInput;


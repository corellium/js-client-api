/**
 * Corellium API
 * REST API to manage your virtual devices.
 *
 * The version of the OpenAPI document: 7.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SnapshotOwner from './SnapshotOwner';

/**
 * The SharedSnapshotsInfo model module.
 * @module model/SharedSnapshotsInfo
 * @version 0.4.0
 */
class SharedSnapshotsInfo {
    /**
     * Constructs a new <code>SharedSnapshotsInfo</code>.
     * 
     * @alias module:model/SharedSnapshotsInfo
     * @param id {String} UUID of the snapshot
     * @param name {String} Snapshot name
     * @param model {String} Device model
     * @param sharedOn {Number} UNIX Date of when the snapshot was first shared with member
     */
    constructor(id, name, model, sharedOn) { 
        
        SharedSnapshotsInfo.initialize(this, id, name, model, sharedOn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, model, sharedOn) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['model'] = model;
        obj['sharedOn'] = sharedOn;
    }

    /**
     * Constructs a <code>SharedSnapshotsInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SharedSnapshotsInfo} obj Optional instance to populate.
     * @return {module:model/SharedSnapshotsInfo} The populated <code>SharedSnapshotsInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SharedSnapshotsInfo();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('sharedOn')) {
                obj['sharedOn'] = ApiClient.convertToType(data['sharedOn'], 'Number');
            }
            if (data.hasOwnProperty('sharedWithMember')) {
                obj['sharedWithMember'] = ApiClient.convertToType(data['sharedWithMember'], 'String');
            }
            if (data.hasOwnProperty('sharedBy')) {
                obj['sharedBy'] = SnapshotOwner.constructFromObject(data['sharedBy']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SharedSnapshotsInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SharedSnapshotsInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SharedSnapshotsInfo.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['sharedWithMember'] && !(typeof data['sharedWithMember'] === 'string' || data['sharedWithMember'] instanceof String)) {
            throw new Error("Expected the field `sharedWithMember` to be a primitive type in the JSON string but got " + data['sharedWithMember']);
        }
        // validate the optional field `sharedBy`
        if (data['sharedBy']) { // data not null
          SnapshotOwner.validateJSON(data['sharedBy']);
        }

        return true;
    }


}

SharedSnapshotsInfo.RequiredProperties = ["id", "name", "model", "sharedOn"];

/**
 * UUID of the snapshot
 * @member {String} id
 */
SharedSnapshotsInfo.prototype['id'] = undefined;

/**
 * Snapshot name
 * @member {String} name
 */
SharedSnapshotsInfo.prototype['name'] = undefined;

/**
 * Device model
 * @member {String} model
 */
SharedSnapshotsInfo.prototype['model'] = undefined;

/**
 * UNIX Date of when the snapshot was first shared with member
 * @member {Number} sharedOn
 */
SharedSnapshotsInfo.prototype['sharedOn'] = undefined;

/**
 * The member who the snapshot was shared with. Only present in sharedWithUser
 * @member {String} sharedWithMember
 */
SharedSnapshotsInfo.prototype['sharedWithMember'] = undefined;

/**
 * @member {module:model/SnapshotOwner} sharedBy
 */
SharedSnapshotsInfo.prototype['sharedBy'] = undefined;






export default SharedSnapshotsInfo;


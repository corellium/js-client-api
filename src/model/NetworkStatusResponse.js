/**
 * Corellium API
 * REST API to manage your virtual devices.
 *
 * The version of the OpenAPI document: 7.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NetworkStatusResponse model module.
 * @module model/NetworkStatusResponse
 * @version 0.4.1
 */
class NetworkStatusResponse {
    /**
     * Constructs a new <code>NetworkStatusResponse</code>.
     * 
     * @alias module:model/NetworkStatusResponse
     * @param type {String} Network Provider
     * @param name {String} User defined name
     * @param state {module:model/NetworkStatusResponse.StateEnum} Current state of the network connection
     * @param params {Object} Additional state information
     */
    constructor(type, name, state, params) { 
        
        NetworkStatusResponse.initialize(this, type, name, state, params);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, name, state, params) { 
        obj['type'] = type;
        obj['name'] = name;
        obj['state'] = state;
        obj['params'] = params;
    }

    /**
     * Constructs a <code>NetworkStatusResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkStatusResponse} obj Optional instance to populate.
     * @return {module:model/NetworkStatusResponse} The populated <code>NetworkStatusResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworkStatusResponse();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('params')) {
                obj['params'] = ApiClient.convertToType(data['params'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NetworkStatusResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NetworkStatusResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NetworkStatusResponse.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}

NetworkStatusResponse.RequiredProperties = ["type", "name", "state", "params"];

/**
 * Network Provider
 * @member {String} type
 */
NetworkStatusResponse.prototype['type'] = undefined;

/**
 * User defined name
 * @member {String} name
 */
NetworkStatusResponse.prototype['name'] = undefined;

/**
 * Current state of the network connection
 * @member {module:model/NetworkStatusResponse.StateEnum} state
 */
NetworkStatusResponse.prototype['state'] = undefined;

/**
 * Additional state information
 * @member {Object} params
 */
NetworkStatusResponse.prototype['params'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
NetworkStatusResponse['StateEnum'] = {

    /**
     * value: "inactive"
     * @const
     */
    "inactive": "inactive",

    /**
     * value: "connecting"
     * @const
     */
    "connecting": "connecting",

    /**
     * value: "connected"
     * @const
     */
    "connected": "connected",

    /**
     * value: "error"
     * @const
     */
    "error": "error"
};



export default NetworkStatusResponse;


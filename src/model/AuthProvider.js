/**
 * Corellium API
 * REST API to manage your virtual devices.
 *
 * The version of the OpenAPI document: 7.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AuthProvider model module.
 * @module model/AuthProvider
 * @version 0.4.0
 */
class AuthProvider {
    /**
     * Constructs a new <code>AuthProvider</code>.
     * 
     * @alias module:model/AuthProvider
     */
    constructor() { 
        
        AuthProvider.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuthProvider</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuthProvider} obj Optional instance to populate.
     * @return {module:model/AuthProvider} The populated <code>AuthProvider</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthProvider();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('providerType')) {
                obj['providerType'] = ApiClient.convertToType(data['providerType'], 'String');
            }
            if (data.hasOwnProperty('default')) {
                obj['default'] = ApiClient.convertToType(data['default'], 'Boolean');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('authorizationUrl')) {
                obj['authorizationUrl'] = ApiClient.convertToType(data['authorizationUrl'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuthProvider</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuthProvider</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        // ensure the json data is a string
        if (data['providerType'] && !(typeof data['providerType'] === 'string' || data['providerType'] instanceof String)) {
            throw new Error("Expected the field `providerType` to be a primitive type in the JSON string but got " + data['providerType']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['authorizationUrl'] && !(typeof data['authorizationUrl'] === 'string' || data['authorizationUrl'] instanceof String)) {
            throw new Error("Expected the field `authorizationUrl` to be a primitive type in the JSON string but got " + data['authorizationUrl']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }

        return true;
    }


}



/**
 * Provider name for a given provider type
 * @member {String} name
 */
AuthProvider.prototype['name'] = undefined;

/**
 * The identifier for the provider
 * @member {String} identifier
 */
AuthProvider.prototype['identifier'] = undefined;

/**
 * Provider type
 * @member {String} providerType
 */
AuthProvider.prototype['providerType'] = undefined;

/**
 * Denotes whether it's the default
 * @member {Boolean} default
 */
AuthProvider.prototype['default'] = undefined;

/**
 * Provider label
 * @member {String} label
 */
AuthProvider.prototype['label'] = undefined;

/**
 * Denotes whether they're enabled or not
 * @member {Boolean} enabled
 */
AuthProvider.prototype['enabled'] = undefined;

/**
 * URL for provider auth
 * @member {String} authorizationUrl
 */
AuthProvider.prototype['authorizationUrl'] = undefined;

/**
 * The identifier for the provider
 * @member {String} id
 */
AuthProvider.prototype['id'] = undefined;

/**
 * Auth provider
 * @member {String} provider
 */
AuthProvider.prototype['provider'] = undefined;






export default AuthProvider;


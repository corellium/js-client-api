/**
 * Corellium API
 * REST API to manage your virtual devices.
 *
 * The version of the OpenAPI document: 7.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InstanceBootOptions from './InstanceBootOptions';
import Model from './Model';
import VolumeOptions from './VolumeOptions';

/**
 * The InstanceCreateOptions model module.
 * @module model/InstanceCreateOptions
 * @version 0.4.1
 */
class InstanceCreateOptions {
    /**
     * Constructs a new <code>InstanceCreateOptions</code>.
     * 
     * @alias module:model/InstanceCreateOptions
     * @param flavor {String} the flavor id
     * @param project {String} project UUID
     * @param os {String} OS Version
     */
    constructor(flavor, project, os) { 
        
        InstanceCreateOptions.initialize(this, flavor, project, os);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, flavor, project, os) { 
        obj['flavor'] = flavor;
        obj['project'] = project;
        obj['os'] = os;
    }

    /**
     * Constructs a <code>InstanceCreateOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InstanceCreateOptions} obj Optional instance to populate.
     * @return {module:model/InstanceCreateOptions} The populated <code>InstanceCreateOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InstanceCreateOptions();

            if (data.hasOwnProperty('sharedSnapshot')) {
                obj['sharedSnapshot'] = ApiClient.convertToType(data['sharedSnapshot'], 'String');
            }
            if (data.hasOwnProperty('sharedSnapshotPassword')) {
                obj['sharedSnapshotPassword'] = ApiClient.convertToType(data['sharedSnapshotPassword'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('flavor')) {
                obj['flavor'] = ApiClient.convertToType(data['flavor'], 'String');
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ApiClient.convertToType(data['project'], 'String');
            }
            if (data.hasOwnProperty('os')) {
                obj['os'] = ApiClient.convertToType(data['os'], 'String');
            }
            if (data.hasOwnProperty('osbuild')) {
                obj['osbuild'] = ApiClient.convertToType(data['osbuild'], 'String');
            }
            if (data.hasOwnProperty('patches')) {
                obj['patches'] = ApiClient.convertToType(data['patches'], ['String']);
            }
            if (data.hasOwnProperty('fwpackage')) {
                obj['fwpackage'] = ApiClient.convertToType(data['fwpackage'], 'String');
            }
            if (data.hasOwnProperty('origFwPackageUrl')) {
                obj['origFwPackageUrl'] = ApiClient.convertToType(data['origFwPackageUrl'], 'String');
            }
            if (data.hasOwnProperty('encrypt')) {
                obj['encrypt'] = ApiClient.convertToType(data['encrypt'], 'Boolean');
            }
            if (data.hasOwnProperty('wifiMac')) {
                obj['wifiMac'] = ApiClient.convertToType(data['wifiMac'], 'String');
            }
            if (data.hasOwnProperty('volume')) {
                obj['volume'] = VolumeOptions.constructFromObject(data['volume']);
            }
            if (data.hasOwnProperty('snapshot')) {
                obj['snapshot'] = ApiClient.convertToType(data['snapshot'], 'String');
            }
            if (data.hasOwnProperty('bootOptions')) {
                obj['bootOptions'] = InstanceBootOptions.constructFromObject(data['bootOptions']);
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = Model.constructFromObject(data['device']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InstanceCreateOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InstanceCreateOptions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InstanceCreateOptions.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['sharedSnapshot'] && !(typeof data['sharedSnapshot'] === 'string' || data['sharedSnapshot'] instanceof String)) {
            throw new Error("Expected the field `sharedSnapshot` to be a primitive type in the JSON string but got " + data['sharedSnapshot']);
        }
        // ensure the json data is a string
        if (data['sharedSnapshotPassword'] && !(typeof data['sharedSnapshotPassword'] === 'string' || data['sharedSnapshotPassword'] instanceof String)) {
            throw new Error("Expected the field `sharedSnapshotPassword` to be a primitive type in the JSON string but got " + data['sharedSnapshotPassword']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['flavor'] && !(typeof data['flavor'] === 'string' || data['flavor'] instanceof String)) {
            throw new Error("Expected the field `flavor` to be a primitive type in the JSON string but got " + data['flavor']);
        }
        // ensure the json data is a string
        if (data['project'] && !(typeof data['project'] === 'string' || data['project'] instanceof String)) {
            throw new Error("Expected the field `project` to be a primitive type in the JSON string but got " + data['project']);
        }
        // ensure the json data is a string
        if (data['os'] && !(typeof data['os'] === 'string' || data['os'] instanceof String)) {
            throw new Error("Expected the field `os` to be a primitive type in the JSON string but got " + data['os']);
        }
        // ensure the json data is a string
        if (data['osbuild'] && !(typeof data['osbuild'] === 'string' || data['osbuild'] instanceof String)) {
            throw new Error("Expected the field `osbuild` to be a primitive type in the JSON string but got " + data['osbuild']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['patches'])) {
            throw new Error("Expected the field `patches` to be an array in the JSON data but got " + data['patches']);
        }
        // ensure the json data is a string
        if (data['fwpackage'] && !(typeof data['fwpackage'] === 'string' || data['fwpackage'] instanceof String)) {
            throw new Error("Expected the field `fwpackage` to be a primitive type in the JSON string but got " + data['fwpackage']);
        }
        // ensure the json data is a string
        if (data['origFwPackageUrl'] && !(typeof data['origFwPackageUrl'] === 'string' || data['origFwPackageUrl'] instanceof String)) {
            throw new Error("Expected the field `origFwPackageUrl` to be a primitive type in the JSON string but got " + data['origFwPackageUrl']);
        }
        // ensure the json data is a string
        if (data['wifiMac'] && !(typeof data['wifiMac'] === 'string' || data['wifiMac'] instanceof String)) {
            throw new Error("Expected the field `wifiMac` to be a primitive type in the JSON string but got " + data['wifiMac']);
        }
        // validate the optional field `volume`
        if (data['volume']) { // data not null
          VolumeOptions.validateJSON(data['volume']);
        }
        // ensure the json data is a string
        if (data['snapshot'] && !(typeof data['snapshot'] === 'string' || data['snapshot'] instanceof String)) {
            throw new Error("Expected the field `snapshot` to be a primitive type in the JSON string but got " + data['snapshot']);
        }
        // validate the optional field `bootOptions`
        if (data['bootOptions']) { // data not null
          InstanceBootOptions.validateJSON(data['bootOptions']);
        }
        // validate the optional field `device`
        if (data['device']) { // data not null
          Model.validateJSON(data['device']);
        }

        return true;
    }


}

InstanceCreateOptions.RequiredProperties = ["flavor", "project", "os"];

/**
 * identifier of the snapshot that was shared.
 * @member {String} sharedSnapshot
 */
InstanceCreateOptions.prototype['sharedSnapshot'] = undefined;

/**
 * optional password if the shared snapshot requires a password.
 * @member {String} sharedSnapshotPassword
 */
InstanceCreateOptions.prototype['sharedSnapshotPassword'] = undefined;

/**
 * the name of the device
 * @member {String} name
 */
InstanceCreateOptions.prototype['name'] = undefined;

/**
 * Key used to encrypt the Instance
 * @member {String} key
 */
InstanceCreateOptions.prototype['key'] = undefined;

/**
 * the flavor id
 * @member {String} flavor
 */
InstanceCreateOptions.prototype['flavor'] = undefined;

/**
 * project UUID
 * @member {String} project
 */
InstanceCreateOptions.prototype['project'] = undefined;

/**
 * OS Version
 * @member {String} os
 */
InstanceCreateOptions.prototype['os'] = undefined;

/**
 * OS Build
 * @member {String} osbuild
 */
InstanceCreateOptions.prototype['osbuild'] = undefined;

/**
 * list of patches to apply
 * @member {Array.<String>} patches
 */
InstanceCreateOptions.prototype['patches'] = undefined;

/**
 * URL or image id
 * @member {String} fwpackage
 */
InstanceCreateOptions.prototype['fwpackage'] = undefined;

/**
 * URL that firmware package used to create this instance is available at
 * @member {String} origFwPackageUrl
 */
InstanceCreateOptions.prototype['origFwPackageUrl'] = undefined;

/**
 * 
 * @member {Boolean} encrypt
 */
InstanceCreateOptions.prototype['encrypt'] = undefined;

/**
 * 
 * @member {String} wifiMac
 */
InstanceCreateOptions.prototype['wifiMac'] = undefined;

/**
 * @member {module:model/VolumeOptions} volume
 */
InstanceCreateOptions.prototype['volume'] = undefined;

/**
 * Snapshot ID for this instance to be cloned from if defined
 * @member {String} snapshot
 */
InstanceCreateOptions.prototype['snapshot'] = undefined;

/**
 * @member {module:model/InstanceBootOptions} bootOptions
 */
InstanceCreateOptions.prototype['bootOptions'] = undefined;

/**
 * @member {module:model/Model} device
 */
InstanceCreateOptions.prototype['device'] = undefined;






export default InstanceCreateOptions;


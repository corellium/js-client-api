/**
 * Corellium API
 * REST API to manage your virtual devices.
 *
 * The version of the OpenAPI document: 7.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SharedSnapshotsInfo from './SharedSnapshotsInfo';

/**
 * The UserSnapshots model module.
 * @module model/UserSnapshots
 * @version 0.4.0
 */
class UserSnapshots {
    /**
     * Constructs a new <code>UserSnapshots</code>.
     * 
     * @alias module:model/UserSnapshots
     * @param sharedWithUser {module:model/SharedSnapshotsInfo} 
     * @param sharedByUser {module:model/SharedSnapshotsInfo} 
     */
    constructor(sharedWithUser, sharedByUser) { 
        
        UserSnapshots.initialize(this, sharedWithUser, sharedByUser);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sharedWithUser, sharedByUser) { 
        obj['sharedWithUser'] = sharedWithUser;
        obj['sharedByUser'] = sharedByUser;
    }

    /**
     * Constructs a <code>UserSnapshots</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserSnapshots} obj Optional instance to populate.
     * @return {module:model/UserSnapshots} The populated <code>UserSnapshots</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserSnapshots();

            if (data.hasOwnProperty('sharedWithUser')) {
                obj['sharedWithUser'] = SharedSnapshotsInfo.constructFromObject(data['sharedWithUser']);
            }
            if (data.hasOwnProperty('sharedByUser')) {
                obj['sharedByUser'] = SharedSnapshotsInfo.constructFromObject(data['sharedByUser']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserSnapshots</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserSnapshots</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserSnapshots.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `sharedWithUser`
        if (data['sharedWithUser']) { // data not null
          SharedSnapshotsInfo.validateJSON(data['sharedWithUser']);
        }
        // validate the optional field `sharedByUser`
        if (data['sharedByUser']) { // data not null
          SharedSnapshotsInfo.validateJSON(data['sharedByUser']);
        }

        return true;
    }


}

UserSnapshots.RequiredProperties = ["sharedWithUser", "sharedByUser"];

/**
 * @member {module:model/SharedSnapshotsInfo} sharedWithUser
 */
UserSnapshots.prototype['sharedWithUser'] = undefined;

/**
 * @member {module:model/SharedSnapshotsInfo} sharedByUser
 */
UserSnapshots.prototype['sharedByUser'] = undefined;






export default UserSnapshots;


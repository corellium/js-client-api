/**
 * Corellium API
 * REST API to manage your virtual devices.
 *
 * The version of the OpenAPI document: 5.2.0-17368
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Model model module.
 * @module model/Model
 * @version 0.3.3
 */
class Model {
    /**
     * Constructs a new <code>Model</code>.
     * 
     * @alias module:model/Model
     * @param type {String} 
     * @param name {String} 
     * @param flavor {String} 
     * @param model {String} 
     */
    constructor(type, name, flavor, model) { 
        
        Model.initialize(this, type, name, flavor, model);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, name, flavor, model) { 
        obj['type'] = type;
        obj['name'] = name;
        obj['flavor'] = flavor;
        obj['model'] = model;
    }

    /**
     * Constructs a <code>Model</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Model} obj Optional instance to populate.
     * @return {module:model/Model} The populated <code>Model</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Model();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('flavor')) {
                obj['flavor'] = ApiClient.convertToType(data['flavor'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('boardConfig')) {
                obj['boardConfig'] = ApiClient.convertToType(data['boardConfig'], 'String');
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
            }
            if (data.hasOwnProperty('cpid')) {
                obj['cpid'] = ApiClient.convertToType(data['cpid'], 'Number');
            }
            if (data.hasOwnProperty('bdid')) {
                obj['bdid'] = ApiClient.convertToType(data['bdid'], 'Number');
            }
            if (data.hasOwnProperty('peripherals')) {
                obj['peripherals'] = ApiClient.convertToType(data['peripherals'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Model</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Model</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Model.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['flavor'] && !(typeof data['flavor'] === 'string' || data['flavor'] instanceof String)) {
            throw new Error("Expected the field `flavor` to be a primitive type in the JSON string but got " + data['flavor']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['boardConfig'] && !(typeof data['boardConfig'] === 'string' || data['boardConfig'] instanceof String)) {
            throw new Error("Expected the field `boardConfig` to be a primitive type in the JSON string but got " + data['boardConfig']);
        }
        // ensure the json data is a string
        if (data['platform'] && !(typeof data['platform'] === 'string' || data['platform'] instanceof String)) {
            throw new Error("Expected the field `platform` to be a primitive type in the JSON string but got " + data['platform']);
        }

        return true;
    }


}

Model.RequiredProperties = ["type", "name", "flavor", "model"];

/**
 * 
 * @member {String} type
 */
Model.prototype['type'] = undefined;

/**
 * 
 * @member {String} name
 */
Model.prototype['name'] = undefined;

/**
 * 
 * @member {String} flavor
 */
Model.prototype['flavor'] = undefined;

/**
 * 
 * @member {String} description
 */
Model.prototype['description'] = undefined;

/**
 * 
 * @member {String} model
 */
Model.prototype['model'] = undefined;

/**
 * 
 * @member {String} boardConfig
 */
Model.prototype['boardConfig'] = undefined;

/**
 * 
 * @member {String} platform
 */
Model.prototype['platform'] = undefined;

/**
 * 
 * @member {Number} cpid
 */
Model.prototype['cpid'] = undefined;

/**
 * 
 * @member {Number} bdid
 */
Model.prototype['bdid'] = undefined;

/**
 * 
 * @member {Boolean} peripherals
 */
Model.prototype['peripherals'] = undefined;






export default Model;


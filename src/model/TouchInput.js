/**
 * Corellium API
 * REST API to manage your virtual devices.
 *
 * The version of the OpenAPI document: 7.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TouchInputButtonsInner from './TouchInputButtonsInner';

/**
 * The TouchInput model module.
 * @module model/TouchInput
 * @version 0.4.0
 */
class TouchInput {
    /**
     * Constructs a new <code>TouchInput</code>.
     * 
     * @alias module:model/TouchInput
     * @param position {Object} Finger Positions
     */
    constructor(position) { 
        
        TouchInput.initialize(this, position);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, position) { 
        obj['position'] = position;
    }

    /**
     * Constructs a <code>TouchInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TouchInput} obj Optional instance to populate.
     * @return {module:model/TouchInput} The populated <code>TouchInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TouchInput();

            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], Object);
            }
            if (data.hasOwnProperty('buttons')) {
                obj['buttons'] = ApiClient.convertToType(data['buttons'], [TouchInputButtonsInner]);
            }
            if (data.hasOwnProperty('normalized')) {
                obj['normalized'] = ApiClient.convertToType(data['normalized'], 'Boolean');
            }
            if (data.hasOwnProperty('wait')) {
                obj['wait'] = ApiClient.convertToType(data['wait'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TouchInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TouchInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TouchInput.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['buttons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['buttons'])) {
                throw new Error("Expected the field `buttons` to be an array in the JSON data but got " + data['buttons']);
            }
            // validate the optional field `buttons` (array)
            for (const item of data['buttons']) {
                TouchInputButtonsInner.validateJSON(item);
            };
        }

        return true;
    }


}

TouchInput.RequiredProperties = ["position"];

/**
 * Finger Positions
 * @member {Object} position
 */
TouchInput.prototype['position'] = undefined;

/**
 * Buttons to be held when this position is reached. Either a Button enum object or an ASCII character. No change if not defined.
 * @member {Array.<module:model/TouchInputButtonsInner>} buttons
 */
TouchInput.prototype['buttons'] = undefined;

/**
 * true if you want to use normalized x,y coordinates from 0-10000 (eg 5000,5000 is always center of screen)
 * @member {Boolean} normalized
 */
TouchInput.prototype['normalized'] = undefined;

/**
 * Duration to wait before this input is executed.  Instant if not defined.
 * @member {Number} wait
 */
TouchInput.prototype['wait'] = undefined;






export default TouchInput;


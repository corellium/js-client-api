/**
 * Corellium API
 * REST API to manage your virtual devices.
 *
 * The version of the OpenAPI document: 7.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivityExportDto from '../model/ActivityExportDto';
import ActivityExportResponse from '../model/ActivityExportResponse';
import ActivityList from '../model/ActivityList';
import ActivityRequest from '../model/ActivityRequest';
import AgentAppReadyResponse from '../model/AgentAppReadyResponse';
import AgentAppsList from '../model/AgentAppsList';
import AgentError from '../model/AgentError';
import AgentIcons from '../model/AgentIcons';
import AgentInstallBody from '../model/AgentInstallBody';
import AgentProfilesReturn from '../model/AgentProfilesReturn';
import AgentSystemAdbAuth from '../model/AgentSystemAdbAuth';
import AgentSystemGetPropBody from '../model/AgentSystemGetPropBody';
import AgentSystemSetHostnameBody from '../model/AgentSystemSetHostnameBody';
import AgentValueReturn from '../model/AgentValueReturn';
import AgreedAck from '../model/AgreedAck';
import ApiConflictError from '../model/ApiConflictError';
import ApiError from '../model/ApiError';
import ApiInternalConsistencyError from '../model/ApiInternalConsistencyError';
import ApiNotFoundError from '../model/ApiNotFoundError';
import Assessment from '../model/Assessment';
import AssessmentIdStatus from '../model/AssessmentIdStatus';
import BtraceEnableOptions from '../model/BtraceEnableOptions';
import CheckSubdomainResponse from '../model/CheckSubdomainResponse';
import ConfigResponse from '../model/ConfigResponse';
import CreateAssessmentDto from '../model/CreateAssessmentDto';
import CreateNetworkConnectionOptions from '../model/CreateNetworkConnectionOptions';
import CreateTeam from '../model/CreateTeam';
import Credentials from '../model/Credentials';
import DomainAuthProviderRequest from '../model/DomainAuthProviderRequest';
import DomainAuthProviderResponse from '../model/DomainAuthProviderResponse';
import FileChanges from '../model/FileChanges';
import Firmware from '../model/Firmware';
import GetAssessmentsByInstanceId500Response from '../model/GetAssessmentsByInstanceId500Response';
import GpiosState from '../model/GpiosState';
import Hook from '../model/Hook';
import Image from '../model/Image';
import InputResponse from '../model/InputResponse';
import Instance from '../model/Instance';
import InstanceConsoleEndpoint from '../model/InstanceConsoleEndpoint';
import InstanceCreateOptions from '../model/InstanceCreateOptions';
import InstanceInput from '../model/InstanceInput';
import InstanceReturn from '../model/InstanceReturn';
import InstanceStartOptions from '../model/InstanceStartOptions';
import InstanceState from '../model/InstanceState';
import InstanceStopOptions from '../model/InstanceStopOptions';
import InstanceUpgradeBody from '../model/InstanceUpgradeBody';
import Kcrange from '../model/Kcrange';
import KernelTask from '../model/KernelTask';
import MediaPlayBody from '../model/MediaPlayBody';
import Model from '../model/Model';
import NetdumpFilter from '../model/NetdumpFilter';
import NetworkConnection from '../model/NetworkConnection';
import NetworkConnectionOffsetPaginationResult from '../model/NetworkConnectionOffsetPaginationResult';
import NetworkConnectionProviderOffsetPaginationResult from '../model/NetworkConnectionProviderOffsetPaginationResult';
import NetworkStatusResponse from '../model/NetworkStatusResponse';
import PasswordChangeBody from '../model/PasswordChangeBody';
import PasswordResetBody from '../model/PasswordResetBody';
import PatchInstanceOptions from '../model/PatchInstanceOptions';
import PeripheralsData from '../model/PeripheralsData';
import PostShareSnapshotRequestPayload from '../model/PostShareSnapshotRequestPayload';
import Project from '../model/Project';
import ProjectKey from '../model/ProjectKey';
import ProjectSettings from '../model/ProjectSettings';
import ResetLinkBody from '../model/ResetLinkBody';
import Role from '../model/Role';
import RotateBody from '../model/RotateBody';
import Snapshot from '../model/Snapshot';
import SnapshotCreationOptions from '../model/SnapshotCreationOptions';
import SnapshotPermissionsRequestPayload from '../model/SnapshotPermissionsRequestPayload';
import SslsplitFilter from '../model/SslsplitFilter';
import Team from '../model/Team';
import TeamCreate from '../model/TeamCreate';
import TestAssessmentDto from '../model/TestAssessmentDto';
import Token from '../model/Token';
import UpdateNetworkConnectionOptions from '../model/UpdateNetworkConnectionOptions';
import UserError from '../model/UserError';
import UserSnapshots from '../model/UserSnapshots';
import V1CheckSubdomainExistenceParameters from '../model/V1CheckSubdomainExistenceParameters';
import V1CreateHookParameters from '../model/V1CreateHookParameters';
import V1SetStateBody from '../model/V1SetStateBody';
import ValidationError from '../model/ValidationError';
import WebPlayerCreateSessionRequest from '../model/WebPlayerCreateSessionRequest';
import WebPlayerSession from '../model/WebPlayerSession';

/**
* Corellium service.
* @module api/CorelliumApi
* @version 0.4.0
*/
export default class CorelliumApi {

    /**
    * Constructs a new CorelliumApi. 
    * @alias module:api/CorelliumApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create assessment
     * @param {String} instanceId ID of instance
     * @param {module:model/CreateAssessmentDto} createAssessmentDto Create a new assessment
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssessmentIdStatus} and HTTP response
     */
    createAssessmentWithHttpInfo(instanceId, createAssessmentDto) {
      let postBody = createAssessmentDto;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling createAssessment");
      }
      // verify the required parameter 'createAssessmentDto' is set
      if (createAssessmentDto === undefined || createAssessmentDto === null) {
        throw new Error("Missing the required parameter 'createAssessmentDto' when calling createAssessment");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssessmentIdStatus;
      return this.apiClient.callApi(
        '/v1/services/matrix/{instanceId}/assessments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create assessment
     * @param {String} instanceId ID of instance
     * @param {module:model/CreateAssessmentDto} createAssessmentDto Create a new assessment
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssessmentIdStatus}
     */
    createAssessment(instanceId, createAssessmentDto) {
      return this.createAssessmentWithHttpInfo(instanceId, createAssessmentDto)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete assessment
     * @param {String} instanceId ID of instance
     * @param {String} assessmentId ID of assessment
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAssessmentWithHttpInfo(instanceId, assessmentId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling deleteAssessment");
      }
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling deleteAssessment");
      }

      let pathParams = {
        'instanceId': instanceId,
        'assessmentId': assessmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/services/matrix/{instanceId}/assessments/{assessmentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete assessment
     * @param {String} instanceId ID of instance
     * @param {String} assessmentId ID of assessment
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAssessment(instanceId, assessmentId) {
      return this.deleteAssessmentWithHttpInfo(instanceId, assessmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download report
     * @param {String} instanceId ID of instance
     * @param {String} assessmentId ID of assessment
     * @param {String} format Assessment report download format
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    downloadReportWithHttpInfo(instanceId, assessmentId, format) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling downloadReport");
      }
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling downloadReport");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling downloadReport");
      }

      let pathParams = {
        'instanceId': instanceId,
        'assessmentId': assessmentId
      };
      let queryParams = {
        'format': format
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/html', 'application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/services/matrix/{instanceId}/assessments/{assessmentId}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Download report
     * @param {String} instanceId ID of instance
     * @param {String} assessmentId ID of assessment
     * @param {String} format Assessment report download format
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    downloadReport(instanceId, assessmentId, format) {
      return this.downloadReportWithHttpInfo(instanceId, assessmentId, format)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get assessment by ID
     * @param {String} instanceId ID of instance
     * @param {String} assessmentId ID of assessment
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Assessment} and HTTP response
     */
    getAssessmentByIdWithHttpInfo(instanceId, assessmentId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling getAssessmentById");
      }
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling getAssessmentById");
      }

      let pathParams = {
        'instanceId': instanceId,
        'assessmentId': assessmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Assessment;
      return this.apiClient.callApi(
        '/v1/services/matrix/{instanceId}/assessments/{assessmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get assessment by ID
     * @param {String} instanceId ID of instance
     * @param {String} assessmentId ID of assessment
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Assessment}
     */
    getAssessmentById(instanceId, assessmentId) {
      return this.getAssessmentByIdWithHttpInfo(instanceId, assessmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get assessments by instanceId
     * @param {String} instanceId ID of instance
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Assessment>} and HTTP response
     */
    getAssessmentsByInstanceIdWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling getAssessmentsByInstanceId");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Assessment];
      return this.apiClient.callApi(
        '/v1/services/matrix/{instanceId}/instances/{instanceId}/assessments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get assessments by instanceId
     * @param {String} instanceId ID of instance
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Assessment>}
     */
    getAssessmentsByInstanceId(instanceId) {
      return this.getAssessmentsByInstanceIdWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update assessment state and execute MATRIX tests
     * @param {String} instanceId ID of instance
     * @param {String} assessmentId ID of assessment
     * @param {Object} opts Optional parameters
     * @param {module:model/TestAssessmentDto} [testAssessmentDto] Execute MATRIX tests
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssessmentIdStatus} and HTTP response
     */
    runTestsWithHttpInfo(instanceId, assessmentId, opts) {
      opts = opts || {};
      let postBody = opts['testAssessmentDto'];
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling runTests");
      }
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling runTests");
      }

      let pathParams = {
        'instanceId': instanceId,
        'assessmentId': assessmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssessmentIdStatus;
      return this.apiClient.callApi(
        '/v1/services/matrix/{instanceId}/assessments/{assessmentId}/test', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update assessment state and execute MATRIX tests
     * @param {String} instanceId ID of instance
     * @param {String} assessmentId ID of assessment
     * @param {Object} opts Optional parameters
     * @param {module:model/TestAssessmentDto} opts.testAssessmentDto Execute MATRIX tests
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssessmentIdStatus}
     */
    runTests(instanceId, assessmentId, opts) {
      return this.runTestsWithHttpInfo(instanceId, assessmentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update assessment state and begin device monitoring
     * @param {String} instanceId ID of instance
     * @param {String} assessmentId ID of assessment
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    startMonitoringWithHttpInfo(instanceId, assessmentId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling startMonitoring");
      }
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling startMonitoring");
      }

      let pathParams = {
        'instanceId': instanceId,
        'assessmentId': assessmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/services/matrix/{instanceId}/assessments/{assessmentId}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update assessment state and begin device monitoring
     * @param {String} instanceId ID of instance
     * @param {String} assessmentId ID of assessment
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    startMonitoring(instanceId, assessmentId) {
      return this.startMonitoringWithHttpInfo(instanceId, assessmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update assessment state and stop device monitoring
     * @param {String} instanceId ID of instance
     * @param {String} assessmentId ID of assessment
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    stopMonitoringWithHttpInfo(instanceId, assessmentId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling stopMonitoring");
      }
      // verify the required parameter 'assessmentId' is set
      if (assessmentId === undefined || assessmentId === null) {
        throw new Error("Missing the required parameter 'assessmentId' when calling stopMonitoring");
      }

      let pathParams = {
        'instanceId': instanceId,
        'assessmentId': assessmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/services/matrix/{instanceId}/assessments/{assessmentId}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update assessment state and stop device monitoring
     * @param {String} instanceId ID of instance
     * @param {String} assessmentId ID of assessment
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    stopMonitoring(instanceId, assessmentId) {
      return this.stopMonitoringWithHttpInfo(instanceId, assessmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Accept a snapshot shared with you
     * Accept a snapshot shared with you
     * @param {module:model/PostShareSnapshotRequestPayload} postShareSnapshotRequestPayload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Snapshot} and HTTP response
     */
    v1AcceptSharedSnapshotWithHttpInfo(postShareSnapshotRequestPayload) {
      let postBody = postShareSnapshotRequestPayload;
      // verify the required parameter 'postShareSnapshotRequestPayload' is set
      if (postShareSnapshotRequestPayload === undefined || postShareSnapshotRequestPayload === null) {
        throw new Error("Missing the required parameter 'postShareSnapshotRequestPayload' when calling v1AcceptSharedSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Snapshot;
      return this.apiClient.callApi(
        '/v1/snapshots/accept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Accept a snapshot shared with you
     * Accept a snapshot shared with you
     * @param {module:model/PostShareSnapshotRequestPayload} postShareSnapshotRequestPayload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Snapshot}
     */
    v1AcceptSharedSnapshot(postShareSnapshotRequestPayload) {
      return this.v1AcceptSharedSnapshotWithHttpInfo(postShareSnapshotRequestPayload)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Start activity export
     * @param {module:model/ActivityExportDto} activityExportDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityExportResponse} and HTTP response
     */
    v1ActivityExportWithHttpInfo(activityExportDto) {
      let postBody = activityExportDto;
      // verify the required parameter 'activityExportDto' is set
      if (activityExportDto === undefined || activityExportDto === null) {
        throw new Error("Missing the required parameter 'activityExportDto' when calling v1ActivityExport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActivityExportResponse;
      return this.apiClient.callApi(
        '/v1/activity/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Start activity export
     * @param {module:model/ActivityExportDto} activityExportDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityExportResponse}
     */
    v1ActivityExport(activityExportDto) {
      return this.v1ActivityExportWithHttpInfo(activityExportDto)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get resource activities
     * @param {Object} opts Optional parameters
     * @param {Object.<String, module:model/ActivityRequest>} [request] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityList} and HTTP response
     */
    v1ActivityListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'request': opts['request']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActivityList;
      return this.apiClient.callApi(
        '/v1/activity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get resource activities
     * @param {Object} opts Optional parameters
     * @param {Object.<String, module:model/ActivityRequest>} opts.request 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityList}
     */
    v1ActivityList(opts) {
      return this.v1ActivityListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add Project Authorized Key
     * @param {String} projectId Project ID - uuid
     * @param {module:model/ProjectKey} projectKey Key to add
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProjectKey} and HTTP response
     */
    v1AddProjectKeyWithHttpInfo(projectId, projectKey) {
      let postBody = projectKey;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling v1AddProjectKey");
      }
      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling v1AddProjectKey");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectKey;
      return this.apiClient.callApi(
        '/v1/projects/{projectId}/keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add Project Authorized Key
     * @param {String} projectId Project ID - uuid
     * @param {module:model/ProjectKey} projectKey Key to add
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProjectKey}
     */
    v1AddProjectKey(projectId, projectKey) {
      return this.v1AddProjectKeyWithHttpInfo(projectId, projectKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add team role to project
     * This endpoint is available for Enterprise accounts only
     * @param {String} projectId Project ID - uuid
     * @param {String} teamId Team ID - uuid
     * @param {String} roleId Role ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1AddTeamRoleToProjectWithHttpInfo(projectId, teamId, roleId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling v1AddTeamRoleToProject");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling v1AddTeamRoleToProject");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling v1AddTeamRoleToProject");
      }

      let pathParams = {
        'projectId': projectId,
        'teamId': teamId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/roles/projects/{projectId}/teams/{teamId}/roles/{roleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add team role to project
     * This endpoint is available for Enterprise accounts only
     * @param {String} projectId Project ID - uuid
     * @param {String} teamId Team ID - uuid
     * @param {String} roleId Role ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1AddTeamRoleToProject(projectId, teamId, roleId) {
      return this.v1AddTeamRoleToProjectWithHttpInfo(projectId, teamId, roleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add user role to project
     * This endpoint is available for Enterprise accounts only
     * @param {String} projectId Project ID - uuid
     * @param {String} userId User ID - uuid
     * @param {String} roleId Role ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1AddUserRoleToProjectWithHttpInfo(projectId, userId, roleId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling v1AddUserRoleToProject");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling v1AddUserRoleToProject");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling v1AddUserRoleToProject");
      }

      let pathParams = {
        'projectId': projectId,
        'userId': userId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/roles/projects/{projectId}/users/{userId}/roles/{roleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add user role to project
     * This endpoint is available for Enterprise accounts only
     * @param {String} projectId Project ID - uuid
     * @param {String} userId User ID - uuid
     * @param {String} roleId Role ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1AddUserRoleToProject(projectId, userId, roleId) {
      return this.v1AddUserRoleToProjectWithHttpInfo(projectId, userId, roleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add user to team
     * This endpoint is available for Enterprise accounts only
     * @param {String} teamId Team ID - uuid
     * @param {String} userId User ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1AddUserToTeamWithHttpInfo(teamId, userId) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling v1AddUserToTeam");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling v1AddUserToTeam");
      }

      let pathParams = {
        'teamId': teamId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/teams/{teamId}/users/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add user to team
     * This endpoint is available for Enterprise accounts only
     * @param {String} teamId Team ID - uuid
     * @param {String} userId User ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1AddUserToTeam(teamId, userId) {
      return this.v1AddUserToTeamWithHttpInfo(teamId, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Check if App subsystem is ready
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AgentAppReadyResponse} and HTTP response
     */
    v1AgentAppReadyWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1AgentAppReady");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AgentAppReadyResponse;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/agent/v1/app/ready', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Check if App subsystem is ready
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AgentAppReadyResponse}
     */
    v1AgentAppReady(instanceId) {
      return this.v1AgentAppReadyWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a File on VM
     * @param {String} instanceId Instance ID - uuid
     * @param {String} filePath File Path on VM
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1AgentDeleteFileWithHttpInfo(instanceId, filePath) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1AgentDeleteFile");
      }
      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling v1AgentDeleteFile");
      }

      let pathParams = {
        'instanceId': instanceId,
        'filePath': filePath
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/agent/v1/file/device/{filePath}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a File on VM
     * @param {String} instanceId Instance ID - uuid
     * @param {String} filePath File Path on VM
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1AgentDeleteFile(instanceId, filePath) {
      return this.v1AgentDeleteFileWithHttpInfo(instanceId, filePath)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download a File from VM
     * @param {String} instanceId Instance ID - uuid
     * @param {String} filePath File Path on VM
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    v1AgentGetFileWithHttpInfo(instanceId, filePath) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1AgentGetFile");
      }
      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling v1AgentGetFile");
      }

      let pathParams = {
        'instanceId': instanceId,
        'filePath': filePath
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/agent/v1/file/device/{filePath}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Download a File from VM
     * @param {String} instanceId Instance ID - uuid
     * @param {String} filePath File Path on VM
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    v1AgentGetFile(instanceId, filePath) {
      return this.v1AgentGetFileWithHttpInfo(instanceId, filePath)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the path for a new temp file
     * Returns a temporary random filename that is guranteed to be unique on the VMs filesystem at the time of invocation of this method.
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    v1AgentGetTempFilenameWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1AgentGetTempFilename");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/agent/v1/file/temp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the path for a new temp file
     * Returns a temporary random filename that is guranteed to be unique on the VMs filesystem at the time of invocation of this method.
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    v1AgentGetTempFilename(instanceId) {
      return this.v1AgentGetTempFilenameWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Install App at path
     * Installs the app located at path which must be present on the VM filesystem
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/AgentInstallBody} agentInstallBody App parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1AgentInstallAppWithHttpInfo(instanceId, agentInstallBody) {
      let postBody = agentInstallBody;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1AgentInstallApp");
      }
      // verify the required parameter 'agentInstallBody' is set
      if (agentInstallBody === undefined || agentInstallBody === null) {
        throw new Error("Missing the required parameter 'agentInstallBody' when calling v1AgentInstallApp");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/agent/v1/app/install', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Install App at path
     * Installs the app located at path which must be present on the VM filesystem
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/AgentInstallBody} agentInstallBody App parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1AgentInstallApp(instanceId, agentInstallBody) {
      return this.v1AgentInstallAppWithHttpInfo(instanceId, agentInstallBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Install a Profile to VM
     * @param {String} instanceId Instance ID - uuid
     * @param {File} body Profile to Install
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1AgentInstallProfileWithHttpInfo(instanceId, body) {
      let postBody = body;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1AgentInstallProfile");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v1AgentInstallProfile");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/agent/v1/profile/install', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Install a Profile to VM
     * @param {String} instanceId Instance ID - uuid
     * @param {File} body Profile to Install
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1AgentInstallProfile(instanceId, body) {
      return this.v1AgentInstallProfileWithHttpInfo(instanceId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Kill an App
     * @param {String} instanceId Instance ID - uuid
     * @param {String} bundleId App Bundle ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    v1AgentKillAppWithHttpInfo(instanceId, bundleId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1AgentKillApp");
      }
      // verify the required parameter 'bundleId' is set
      if (bundleId === undefined || bundleId === null) {
        throw new Error("Missing the required parameter 'bundleId' when calling v1AgentKillApp");
      }

      let pathParams = {
        'instanceId': instanceId,
        'bundleId': bundleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/agent/v1/app/apps/{bundleId}/kill', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Kill an App
     * @param {String} instanceId Instance ID - uuid
     * @param {String} bundleId App Bundle ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    v1AgentKillApp(instanceId, bundleId) {
      return this.v1AgentKillAppWithHttpInfo(instanceId, bundleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List App Icons
     * @param {String} instanceId Instance ID - uuid
     * @param {Array.<String>} bundleID App Bundle ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AgentIcons>} and HTTP response
     */
    v1AgentListAppIconsWithHttpInfo(instanceId, bundleID) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1AgentListAppIcons");
      }
      // verify the required parameter 'bundleID' is set
      if (bundleID === undefined || bundleID === null) {
        throw new Error("Missing the required parameter 'bundleID' when calling v1AgentListAppIcons");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
        'bundleID': this.apiClient.buildCollectionParam(bundleID, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AgentIcons];
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/agent/v1/app/icons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List App Icons
     * @param {String} instanceId Instance ID - uuid
     * @param {Array.<String>} bundleID App Bundle ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AgentIcons>}
     */
    v1AgentListAppIcons(instanceId, bundleID) {
      return this.v1AgentListAppIconsWithHttpInfo(instanceId, bundleID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Apps
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AgentAppsList} and HTTP response
     */
    v1AgentListAppsWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1AgentListApps");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AgentAppsList;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/agent/v1/app/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Apps
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AgentAppsList}
     */
    v1AgentListApps(instanceId) {
      return this.v1AgentListAppsWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Apps Status
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AgentAppsList} and HTTP response
     */
    v1AgentListAppsStatusWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1AgentListAppsStatus");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AgentAppsList;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/agent/v1/app/apps/update', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Apps Status
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AgentAppsList}
     */
    v1AgentListAppsStatus(instanceId) {
      return this.v1AgentListAppsStatusWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Profiles
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AgentProfilesReturn} and HTTP response
     */
    v1AgentListProfilesWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1AgentListProfiles");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AgentProfilesReturn;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/agent/v1/profile/profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Profiles
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AgentProfilesReturn}
     */
    v1AgentListProfiles(instanceId) {
      return this.v1AgentListProfilesWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Run an App
     * @param {String} instanceId Instance ID - uuid
     * @param {String} bundleId App Bundle ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    v1AgentRunAppWithHttpInfo(instanceId, bundleId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1AgentRunApp");
      }
      // verify the required parameter 'bundleId' is set
      if (bundleId === undefined || bundleId === null) {
        throw new Error("Missing the required parameter 'bundleId' when calling v1AgentRunApp");
      }

      let pathParams = {
        'instanceId': instanceId,
        'bundleId': bundleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/agent/v1/app/apps/{bundleId}/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Run an App
     * @param {String} instanceId Instance ID - uuid
     * @param {String} bundleId App Bundle ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    v1AgentRunApp(instanceId, bundleId) {
      return this.v1AgentRunAppWithHttpInfo(instanceId, bundleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change Attrs of a File on VM
     * @param {String} instanceId Instance ID - uuid
     * @param {String} filePath File Path on VM
     * @param {module:model/FileChanges} fileChanges New attrs
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1AgentSetFileAttributesWithHttpInfo(instanceId, filePath, fileChanges) {
      let postBody = fileChanges;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1AgentSetFileAttributes");
      }
      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling v1AgentSetFileAttributes");
      }
      // verify the required parameter 'fileChanges' is set
      if (fileChanges === undefined || fileChanges === null) {
        throw new Error("Missing the required parameter 'fileChanges' when calling v1AgentSetFileAttributes");
      }

      let pathParams = {
        'instanceId': instanceId,
        'filePath': filePath
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/agent/v1/file/device/{filePath}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Change Attrs of a File on VM
     * @param {String} instanceId Instance ID - uuid
     * @param {String} filePath File Path on VM
     * @param {module:model/FileChanges} fileChanges New attrs
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1AgentSetFileAttributes(instanceId, filePath, fileChanges) {
      return this.v1AgentSetFileAttributesWithHttpInfo(instanceId, filePath, fileChanges)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get ADB Auth Setting (AOSP only)
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AgentSystemAdbAuth} and HTTP response
     */
    v1AgentSystemGetAdbAuthWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1AgentSystemGetAdbAuth");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AgentSystemAdbAuth;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/agent/v1/system/adbauth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get ADB Auth Setting (AOSP only)
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AgentSystemAdbAuth}
     */
    v1AgentSystemGetAdbAuth(instanceId) {
      return this.v1AgentSystemGetAdbAuthWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get IP of eth0 (AOSP only)
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AgentValueReturn} and HTTP response
     */
    v1AgentSystemGetNetworkWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1AgentSystemGetNetwork");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AgentValueReturn;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/agent/v1/system/network', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get IP of eth0 (AOSP only)
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AgentValueReturn}
     */
    v1AgentSystemGetNetwork(instanceId) {
      return this.v1AgentSystemGetNetworkWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get System Property (AOSP only)
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/AgentSystemGetPropBody} agentSystemGetPropBody Parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AgentValueReturn} and HTTP response
     */
    v1AgentSystemGetPropWithHttpInfo(instanceId, agentSystemGetPropBody) {
      let postBody = agentSystemGetPropBody;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1AgentSystemGetProp");
      }
      // verify the required parameter 'agentSystemGetPropBody' is set
      if (agentSystemGetPropBody === undefined || agentSystemGetPropBody === null) {
        throw new Error("Missing the required parameter 'agentSystemGetPropBody' when calling v1AgentSystemGetProp");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AgentValueReturn;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/agent/v1/system/getprop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get System Property (AOSP only)
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/AgentSystemGetPropBody} agentSystemGetPropBody Parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AgentValueReturn}
     */
    v1AgentSystemGetProp(instanceId, agentSystemGetPropBody) {
      return this.v1AgentSystemGetPropWithHttpInfo(instanceId, agentSystemGetPropBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Install OpenGApps (AOSP only)
     * @param {String} instanceId Instance ID - uuid
     * @param {Object.<String, Object>} body Installation parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1AgentSystemInstallOpenGAppsWithHttpInfo(instanceId, body) {
      let postBody = body;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1AgentSystemInstallOpenGApps");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v1AgentSystemInstallOpenGApps");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/agent/v1/system/install-opengapps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Install OpenGApps (AOSP only)
     * @param {String} instanceId Instance ID - uuid
     * @param {Object.<String, Object>} body Installation parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1AgentSystemInstallOpenGApps(instanceId, body) {
      return this.v1AgentSystemInstallOpenGAppsWithHttpInfo(instanceId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Lock Device (iOS Only)
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1AgentSystemLockWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1AgentSystemLock");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/agent/v1/system/lock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Lock Device (iOS Only)
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1AgentSystemLock(instanceId) {
      return this.v1AgentSystemLockWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set ADB Auth Setting (AOSP only)
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/AgentSystemAdbAuth} agentSystemAdbAuth Desired ADB Auth Setting
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1AgentSystemSetAdbAuthWithHttpInfo(instanceId, agentSystemAdbAuth) {
      let postBody = agentSystemAdbAuth;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1AgentSystemSetAdbAuth");
      }
      // verify the required parameter 'agentSystemAdbAuth' is set
      if (agentSystemAdbAuth === undefined || agentSystemAdbAuth === null) {
        throw new Error("Missing the required parameter 'agentSystemAdbAuth' when calling v1AgentSystemSetAdbAuth");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/agent/v1/system/adbauth', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set ADB Auth Setting (AOSP only)
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/AgentSystemAdbAuth} agentSystemAdbAuth Desired ADB Auth Setting
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1AgentSystemSetAdbAuth(instanceId, agentSystemAdbAuth) {
      return this.v1AgentSystemSetAdbAuthWithHttpInfo(instanceId, agentSystemAdbAuth)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set Hostname of instance
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/AgentSystemSetHostnameBody} agentSystemSetHostnameBody New hostname
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1AgentSystemSetHostnameWithHttpInfo(instanceId, agentSystemSetHostnameBody) {
      let postBody = agentSystemSetHostnameBody;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1AgentSystemSetHostname");
      }
      // verify the required parameter 'agentSystemSetHostnameBody' is set
      if (agentSystemSetHostnameBody === undefined || agentSystemSetHostnameBody === null) {
        throw new Error("Missing the required parameter 'agentSystemSetHostnameBody' when calling v1AgentSystemSetHostname");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/agent/v1/system/setHostname', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set Hostname of instance
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/AgentSystemSetHostnameBody} agentSystemSetHostnameBody New hostname
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1AgentSystemSetHostname(instanceId, agentSystemSetHostnameBody) {
      return this.v1AgentSystemSetHostnameWithHttpInfo(instanceId, agentSystemSetHostnameBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Instruct VM to halt
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1AgentSystemShutdownWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1AgentSystemShutdown");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/agent/v1/system/shutdown', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Instruct VM to halt
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1AgentSystemShutdown(instanceId) {
      return this.v1AgentSystemShutdownWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Unlock Device (iOS Only)
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1AgentSystemUnlockWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1AgentSystemUnlock");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/agent/v1/system/unlock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Unlock Device (iOS Only)
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1AgentSystemUnlock(instanceId) {
      return this.v1AgentSystemUnlockWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Uninstall an App
     * @param {String} instanceId Instance ID - uuid
     * @param {String} bundleId App Bundle ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    v1AgentUninstallAppWithHttpInfo(instanceId, bundleId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1AgentUninstallApp");
      }
      // verify the required parameter 'bundleId' is set
      if (bundleId === undefined || bundleId === null) {
        throw new Error("Missing the required parameter 'bundleId' when calling v1AgentUninstallApp");
      }

      let pathParams = {
        'instanceId': instanceId,
        'bundleId': bundleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/agent/v1/app/apps/{bundleId}/uninstall', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Uninstall an App
     * @param {String} instanceId Instance ID - uuid
     * @param {String} bundleId App Bundle ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    v1AgentUninstallApp(instanceId, bundleId) {
      return this.v1AgentUninstallAppWithHttpInfo(instanceId, bundleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Uninstall a Profile from VM
     * @param {String} instanceId Instance ID - uuid
     * @param {String} profileId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1AgentUninstallProfileWithHttpInfo(instanceId, profileId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1AgentUninstallProfile");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling v1AgentUninstallProfile");
      }

      let pathParams = {
        'instanceId': instanceId,
        'profileId': profileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/agent/v1/profile/profiles/{profileId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Uninstall a Profile from VM
     * @param {String} instanceId Instance ID - uuid
     * @param {String} profileId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1AgentUninstallProfile(instanceId, profileId) {
      return this.v1AgentUninstallProfileWithHttpInfo(instanceId, profileId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload a file to VM
     * @param {String} instanceId Instance ID - uuid
     * @param {String} filePath File Path on VM to write to
     * @param {File} body Uploaded File Contents
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1AgentUploadFileWithHttpInfo(instanceId, filePath, body) {
      let postBody = body;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1AgentUploadFile");
      }
      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling v1AgentUploadFile");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v1AgentUploadFile");
      }

      let pathParams = {
        'instanceId': instanceId,
        'filePath': filePath
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/agent/v1/file/device/{filePath}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upload a file to VM
     * @param {String} instanceId Instance ID - uuid
     * @param {String} filePath File Path on VM to write to
     * @param {File} body Uploaded File Contents
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1AgentUploadFile(instanceId, filePath, body) {
      return this.v1AgentUploadFileWithHttpInfo(instanceId, filePath, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Log In
     * @param {Object.<String, Object>} body Authorization data ( Credentials|ApiToken )
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Token} and HTTP response
     */
    v1AuthLoginWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v1AuthLogin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Token;
      return this.apiClient.callApi(
        '/v1/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Log In
     * @param {Object.<String, Object>} body Authorization data ( Credentials|ApiToken )
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Token}
     */
    v1AuthLogin(body) {
      return this.v1AuthLoginWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Pre-authorize an btrace download
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    v1BtracePreauthorizeWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1BtracePreauthorize");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/btrace-authorize', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Pre-authorize an btrace download
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    v1BtracePreauthorize(instanceId) {
      return this.v1BtracePreauthorizeWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Check the existence of a subdomain
     * @param {module:model/V1CheckSubdomainExistenceParameters} v1CheckSubdomainExistenceParameters application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CheckSubdomainResponse} and HTTP response
     */
    v1CheckSubdomainExistenceWithHttpInfo(v1CheckSubdomainExistenceParameters) {
      let postBody = v1CheckSubdomainExistenceParameters;
      // verify the required parameter 'v1CheckSubdomainExistenceParameters' is set
      if (v1CheckSubdomainExistenceParameters === undefined || v1CheckSubdomainExistenceParameters === null) {
        throw new Error("Missing the required parameter 'v1CheckSubdomainExistenceParameters' when calling v1CheckSubdomainExistence");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckSubdomainResponse;
      return this.apiClient.callApi(
        '/v1/domain/check', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Check the existence of a subdomain
     * @param {module:model/V1CheckSubdomainExistenceParameters} v1CheckSubdomainExistenceParameters application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CheckSubdomainResponse}
     */
    v1CheckSubdomainExistence(v1CheckSubdomainExistenceParameters) {
      return this.v1CheckSubdomainExistenceWithHttpInfo(v1CheckSubdomainExistenceParameters)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Clear CoreTrace logs
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1ClearCoreTraceWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1ClearCoreTrace");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/strace', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Clear CoreTrace logs
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1ClearCoreTrace(instanceId) {
      return this.v1ClearCoreTraceWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Clear HyperTrace logs
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1ClearHyperTraceWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1ClearHyperTrace");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/btrace', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Clear HyperTrace logs
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1ClearHyperTrace(instanceId) {
      return this.v1ClearHyperTraceWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Clear Hooks on an instance
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1ClearHyperTraceHooksWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1ClearHyperTraceHooks");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/hooks/clear', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Clear Hooks on an instance
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1ClearHyperTraceHooks(instanceId) {
      return this.v1ClearHyperTraceHooksWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Clear Panics
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1ClearInstancePanicsWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1ClearInstancePanics");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/panics', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Clear Panics
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1ClearInstancePanics(instanceId) {
      return this.v1ClearInstancePanicsWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new auth provider for a domain
     * @param {String} domainId Domain ID - uuid
     * @param {module:model/DomainAuthProviderRequest} domainAuthProviderRequest Request Data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DomainAuthProviderResponse} and HTTP response
     */
    v1CreateDomainAuthProviderWithHttpInfo(domainId, domainAuthProviderRequest) {
      let postBody = domainAuthProviderRequest;
      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling v1CreateDomainAuthProvider");
      }
      // verify the required parameter 'domainAuthProviderRequest' is set
      if (domainAuthProviderRequest === undefined || domainAuthProviderRequest === null) {
        throw new Error("Missing the required parameter 'domainAuthProviderRequest' when calling v1CreateDomainAuthProvider");
      }

      let pathParams = {
        'domainId': domainId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DomainAuthProviderResponse;
      return this.apiClient.callApi(
        '/v1/domain/{domainId}/auth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new auth provider for a domain
     * @param {String} domainId Domain ID - uuid
     * @param {module:model/DomainAuthProviderRequest} domainAuthProviderRequest Request Data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DomainAuthProviderResponse}
     */
    v1CreateDomainAuthProvider(domainId, domainAuthProviderRequest) {
      return this.v1CreateDomainAuthProviderWithHttpInfo(domainId, domainAuthProviderRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create hypervisor hook for Instance
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/V1CreateHookParameters} v1CreateHookParameters application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Hook} and HTTP response
     */
    v1CreateHookWithHttpInfo(instanceId, v1CreateHookParameters) {
      let postBody = v1CreateHookParameters;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1CreateHook");
      }
      // verify the required parameter 'v1CreateHookParameters' is set
      if (v1CreateHookParameters === undefined || v1CreateHookParameters === null) {
        throw new Error("Missing the required parameter 'v1CreateHookParameters' when calling v1CreateHook");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Hook;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/hooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create hypervisor hook for Instance
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/V1CreateHookParameters} v1CreateHookParameters application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Hook}
     */
    v1CreateHook(instanceId, v1CreateHookParameters) {
      return this.v1CreateHookWithHttpInfo(instanceId, v1CreateHookParameters)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new Image
     * @param {String} type Image type
     * @param {module:model/String} encoding How the file is stored
     * @param {Object} opts Optional parameters
     * @param {Boolean} [encapsulated] set to false if the uploaded file is not encapsulated inside an outer zipfile
     * @param {String} [name] Image name
     * @param {String} [project] Project ID
     * @param {String} [instance] Instance ID
     * @param {File} [file] Optionally the actual file
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Image} and HTTP response
     */
    v1CreateImageWithHttpInfo(type, encoding, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling v1CreateImage");
      }
      // verify the required parameter 'encoding' is set
      if (encoding === undefined || encoding === null) {
        throw new Error("Missing the required parameter 'encoding' when calling v1CreateImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'type': type,
        'encoding': encoding,
        'encapsulated': opts['encapsulated'],
        'name': opts['name'],
        'project': opts['project'],
        'instance': opts['instance'],
        'file': opts['file']
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Image;
      return this.apiClient.callApi(
        '/v1/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new Image
     * @param {String} type Image type
     * @param {module:model/String} encoding How the file is stored
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.encapsulated set to false if the uploaded file is not encapsulated inside an outer zipfile
     * @param {String} opts.name Image name
     * @param {String} opts.project Project ID
     * @param {String} opts.instance Instance ID
     * @param {File} opts.file Optionally the actual file
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Image}
     */
    v1CreateImage(type, encoding, opts) {
      return this.v1CreateImageWithHttpInfo(type, encoding, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Instance
     * @param {module:model/InstanceCreateOptions} instanceCreateOptions The vm definition to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstanceReturn} and HTTP response
     */
    v1CreateInstanceWithHttpInfo(instanceCreateOptions) {
      let postBody = instanceCreateOptions;
      // verify the required parameter 'instanceCreateOptions' is set
      if (instanceCreateOptions === undefined || instanceCreateOptions === null) {
        throw new Error("Missing the required parameter 'instanceCreateOptions' when calling v1CreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InstanceReturn;
      return this.apiClient.callApi(
        '/v1/instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Instance
     * @param {module:model/InstanceCreateOptions} instanceCreateOptions The vm definition to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstanceReturn}
     */
    v1CreateInstance(instanceCreateOptions) {
      return this.v1CreateInstanceWithHttpInfo(instanceCreateOptions)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new Network Connection
     * You must have the domain administrator role to create a network connection. VLAN networks are only supported in bridged networking mode.
     * @param {module:model/CreateNetworkConnectionOptions} createNetworkConnectionOptions Network Connection Options
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NetworkConnection} and HTTP response
     */
    v1CreateNetworkConnectionWithHttpInfo(createNetworkConnectionOptions) {
      let postBody = createNetworkConnectionOptions;
      // verify the required parameter 'createNetworkConnectionOptions' is set
      if (createNetworkConnectionOptions === undefined || createNetworkConnectionOptions === null) {
        throw new Error("Missing the required parameter 'createNetworkConnectionOptions' when calling v1CreateNetworkConnection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NetworkConnection;
      return this.apiClient.callApi(
        '/v1/network/connections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new Network Connection
     * You must have the domain administrator role to create a network connection. VLAN networks are only supported in bridged networking mode.
     * @param {module:model/CreateNetworkConnectionOptions} createNetworkConnectionOptions Network Connection Options
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NetworkConnection}
     */
    v1CreateNetworkConnection(createNetworkConnectionOptions) {
      return this.v1CreateNetworkConnectionWithHttpInfo(createNetworkConnectionOptions)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Project
     * @param {module:model/Project} project Project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
     */
    v1CreateProjectWithHttpInfo(project) {
      let postBody = project;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling v1CreateProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/v1/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Project
     * @param {module:model/Project} project Project
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
     */
    v1CreateProject(project) {
      return this.v1CreateProjectWithHttpInfo(project)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Instance Snapshot
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/SnapshotCreationOptions} snapshotCreationOptions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Snapshot} and HTTP response
     */
    v1CreateSnapshotWithHttpInfo(instanceId, snapshotCreationOptions) {
      let postBody = snapshotCreationOptions;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1CreateSnapshot");
      }
      // verify the required parameter 'snapshotCreationOptions' is set
      if (snapshotCreationOptions === undefined || snapshotCreationOptions === null) {
        throw new Error("Missing the required parameter 'snapshotCreationOptions' when calling v1CreateSnapshot");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Snapshot;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/snapshots', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Instance Snapshot
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/SnapshotCreationOptions} snapshotCreationOptions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Snapshot}
     */
    v1CreateSnapshot(instanceId, snapshotCreationOptions) {
      return this.v1CreateSnapshotWithHttpInfo(instanceId, snapshotCreationOptions)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create User
     * @param {Object.<String, Object>} body User data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    v1CreateUserWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v1CreateUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create User
     * @param {Object.<String, Object>} body User data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    v1CreateUser(body) {
      return this.v1CreateUserWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an auth provider from a domain
     * @param {String} domainId Domain ID - uuid
     * @param {String} providerId Provider ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    v1DeleteDomainAuthProviderWithHttpInfo(domainId, providerId) {
      let postBody = null;
      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling v1DeleteDomainAuthProvider");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling v1DeleteDomainAuthProvider");
      }

      let pathParams = {
        'domainId': domainId,
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/domain/{domainId}/auth/{providerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an auth provider from a domain
     * @param {String} domainId Domain ID - uuid
     * @param {String} providerId Provider ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    v1DeleteDomainAuthProvider(domainId, providerId) {
      return this.v1DeleteDomainAuthProviderWithHttpInfo(domainId, providerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an existing hypervisor hook
     * @param {String} hookId Hook ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1DeleteHookWithHttpInfo(hookId) {
      let postBody = null;
      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling v1DeleteHook");
      }

      let pathParams = {
        'hookId': hookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/hooks/{hookId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an existing hypervisor hook
     * @param {String} hookId Hook ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1DeleteHook(hookId) {
      return this.v1DeleteHookWithHttpInfo(hookId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Image
     * @param {String} imageId Image ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1DeleteImageWithHttpInfo(imageId) {
      let postBody = null;
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling v1DeleteImage");
      }

      let pathParams = {
        'imageId': imageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/images/{imageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Image
     * @param {String} imageId Image ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1DeleteImage(imageId) {
      return this.v1DeleteImageWithHttpInfo(imageId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove Instance
     * @param {String} instanceId Instance ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1DeleteInstanceWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1DeleteInstance");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove Instance
     * @param {String} instanceId Instance ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1DeleteInstance(instanceId) {
      return this.v1DeleteInstanceWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an Instance Snapshot
     * @param {String} instanceId Instance ID - uuid
     * @param {String} snapshotId Snapshot ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1DeleteInstanceSnapshotWithHttpInfo(instanceId, snapshotId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1DeleteInstanceSnapshot");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling v1DeleteInstanceSnapshot");
      }

      let pathParams = {
        'instanceId': instanceId,
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/snapshots/{snapshotId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an Instance Snapshot
     * @param {String} instanceId Instance ID - uuid
     * @param {String} snapshotId Snapshot ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1DeleteInstanceSnapshot(instanceId, snapshotId) {
      return this.v1DeleteInstanceSnapshotWithHttpInfo(instanceId, snapshotId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an existing Network Connection
     * You must have the domain administrator role to delete a network connection.
     * @param {String} id Network Connection Identifier - uuid
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force] Force deletion (true only or not present)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1DeleteNetworkConnectionWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1DeleteNetworkConnection");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/network/connections/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an existing Network Connection
     * You must have the domain administrator role to delete a network connection.
     * @param {String} id Network Connection Identifier - uuid
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force Force deletion (true only or not present)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1DeleteNetworkConnection(id, opts) {
      return this.v1DeleteNetworkConnectionWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Project
     * @param {String} projectId Project ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1DeleteProjectWithHttpInfo(projectId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling v1DeleteProject");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projects/{projectId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Project
     * @param {String} projectId Project ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1DeleteProject(projectId) {
      return this.v1DeleteProjectWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Snapshot
     * @param {String} snapshotId Snapshot ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1DeleteSnapshotWithHttpInfo(snapshotId) {
      let postBody = null;
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling v1DeleteSnapshot");
      }

      let pathParams = {
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/snapshots/{snapshotId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Snapshot
     * @param {String} snapshotId Snapshot ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1DeleteSnapshot(snapshotId) {
      return this.v1DeleteSnapshotWithHttpInfo(snapshotId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete member(s)
     * Deletes one or more members from the list of members who have access to the snapshot
     * @param {String} snapshotId Snapshot ID - uuid
     * @param {module:model/SnapshotPermissionsRequestPayload} snapshotPermissionsRequestPayload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Snapshot} and HTTP response
     */
    v1DeleteSnapshotPermissionsWithHttpInfo(snapshotId, snapshotPermissionsRequestPayload) {
      let postBody = snapshotPermissionsRequestPayload;
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling v1DeleteSnapshotPermissions");
      }
      // verify the required parameter 'snapshotPermissionsRequestPayload' is set
      if (snapshotPermissionsRequestPayload === undefined || snapshotPermissionsRequestPayload === null) {
        throw new Error("Missing the required parameter 'snapshotPermissionsRequestPayload' when calling v1DeleteSnapshotPermissions");
      }

      let pathParams = {
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Snapshot;
      return this.apiClient.callApi(
        '/v1/snapshots/{snapshotId}/permissions', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete member(s)
     * Deletes one or more members from the list of members who have access to the snapshot
     * @param {String} snapshotId Snapshot ID - uuid
     * @param {module:model/SnapshotPermissionsRequestPayload} snapshotPermissionsRequestPayload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Snapshot}
     */
    v1DeleteSnapshotPermissions(snapshotId, snapshotPermissionsRequestPayload) {
      return this.v1DeleteSnapshotPermissionsWithHttpInfo(snapshotId, snapshotPermissionsRequestPayload)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete User
     * @param {String} userId userId - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    v1DeleteUserWithHttpInfo(userId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling v1DeleteUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete User
     * @param {String} userId userId - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    v1DeleteUser(userId) {
      return this.v1DeleteUserWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Disable an exposed port on an instance for device access.
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1DisableExposePortWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1DisableExposePort");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/exposeport/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Disable an exposed port on an instance for device access.
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1DisableExposePort(instanceId) {
      return this.v1DisableExposePortWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download activity
     * @param {String} taskId Export ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityList} and HTTP response
     */
    v1DownloadActivityWithHttpInfo(taskId) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling v1DownloadActivity");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActivityList;
      return this.apiClient.callApi(
        '/v1/activity/export/{taskId}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Download activity
     * @param {String} taskId Export ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityList}
     */
    v1DownloadActivity(taskId) {
      return this.v1DownloadActivityWithHttpInfo(taskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Enable an exposed port on an instance for device access.
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1EnableExposePortWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1EnableExposePort");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/exposeport/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Enable an exposed port on an instance for device access.
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1EnableExposePort(instanceId) {
      return this.v1EnableExposePortWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Execute Hooks on an instance
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1ExecuteHyperTraceHooksWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1ExecuteHyperTraceHooks");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/hooks/execute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Execute Hooks on an instance
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1ExecuteHyperTraceHooks(instanceId) {
      return this.v1ExecuteHyperTraceHooksWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get export task status
     * @param {String} taskId Export ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityList} and HTTP response
     */
    v1GetActivityExportStatusWithHttpInfo(taskId) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling v1GetActivityExportStatus");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActivityList;
      return this.apiClient.callApi(
        '/v1/activity/export/{taskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get export task status
     * @param {String} taskId Export ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityList}
     */
    v1GetActivityExportStatus(taskId) {
      return this.v1GetActivityExportStatusWithHttpInfo(taskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all export tasks for user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ActivityList} and HTTP response
     */
    v1GetActivityExportTasksWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActivityList;
      return this.apiClient.callApi(
        '/v1/activity/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all export tasks for user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ActivityList}
     */
    v1GetActivityExportTasks() {
      return this.v1GetActivityExportTasksWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all configs
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConfigResponse} and HTTP response
     */
    v1GetConfigWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigResponse;
      return this.apiClient.callApi(
        '/v1/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all configs
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConfigResponse}
     */
    v1GetConfig() {
      return this.v1GetConfigWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return all configured auth providers for a domain (including globally configured providers)
     * @param {String} domainId Domain ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/DomainAuthProviderResponse>} and HTTP response
     */
    v1GetDomainAuthProvidersWithHttpInfo(domainId) {
      let postBody = null;
      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling v1GetDomainAuthProviders");
      }

      let pathParams = {
        'domainId': domainId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DomainAuthProviderResponse];
      return this.apiClient.callApi(
        '/v1/domain/{domainId}/auth', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Return all configured auth providers for a domain (including globally configured providers)
     * @param {String} domainId Domain ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/DomainAuthProviderResponse>}
     */
    v1GetDomainAuthProviders(domainId) {
      return this.v1GetDomainAuthProvidersWithHttpInfo(domainId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get hypervisor hook by id
     * @param {String} hookId Hook Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Hook} and HTTP response
     */
    v1GetHookByIdWithHttpInfo(hookId) {
      let postBody = null;
      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling v1GetHookById");
      }

      let pathParams = {
        'hookId': hookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Hook;
      return this.apiClient.callApi(
        '/v1/hooks/{hookId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get hypervisor hook by id
     * @param {String} hookId Hook Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Hook}
     */
    v1GetHookById(hookId) {
      return this.v1GetHookByIdWithHttpInfo(hookId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all hypervisor hooks for Instance
     * @param {String} instanceId Instance ID - uuid
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] limit for pagination results, defaults to 20
     * @param {Number} [offset] offset for pagination results, defaults to 0
     * @param {module:model/String} [sort] sort ASC or DESC, defaults to DESC
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Hook>} and HTTP response
     */
    v1GetHooksWithHttpInfo(instanceId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1GetHooks");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Hook];
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/hooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all hypervisor hooks for Instance
     * @param {String} instanceId Instance ID - uuid
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit limit for pagination results, defaults to 20
     * @param {Number} opts.offset offset for pagination results, defaults to 0
     * @param {module:model/String} opts.sort sort ASC or DESC, defaults to DESC
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Hook>}
     */
    v1GetHooks(instanceId, opts) {
      return this.v1GetHooksWithHttpInfo(instanceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Image Metadata
     * @param {String} imageId Image ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Image} and HTTP response
     */
    v1GetImageWithHttpInfo(imageId) {
      let postBody = null;
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling v1GetImage");
      }

      let pathParams = {
        'imageId': imageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Image;
      return this.apiClient.callApi(
        '/v1/images/{imageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Image Metadata
     * @param {String} imageId Image ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Image}
     */
    v1GetImage(imageId) {
      return this.v1GetImageWithHttpInfo(imageId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all Images Metadata
     * @param {Object} opts Optional parameters
     * @param {String} [project] Optionally filter by project - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Image>} and HTTP response
     */
    v1GetImagesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'project': opts['project']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Image];
      return this.apiClient.callApi(
        '/v1/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all Images Metadata
     * @param {Object} opts Optional parameters
     * @param {String} opts.project Optionally filter by project - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Image>}
     */
    v1GetImages(opts) {
      return this.v1GetImagesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Instance
     * @param {String} instanceId Instance ID
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [returnAttr] Attributes to include in instance return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Instance} and HTTP response
     */
    v1GetInstanceWithHttpInfo(instanceId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1GetInstance");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
        'returnAttr': this.apiClient.buildCollectionParam(opts['returnAttr'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Instance;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Instance
     * @param {String} instanceId Instance ID
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.returnAttr Attributes to include in instance return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Instance}
     */
    v1GetInstance(instanceId, opts) {
      return this.v1GetInstanceWithHttpInfo(instanceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get console websocket URL
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstanceConsoleEndpoint} and HTTP response
     */
    v1GetInstanceConsoleWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1GetInstanceConsole");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceConsoleEndpoint;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/console', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get console websocket URL
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstanceConsoleEndpoint}
     */
    v1GetInstanceConsole(instanceId) {
      return this.v1GetInstanceConsoleWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Console Log
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    v1GetInstanceConsoleLogWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1GetInstanceConsoleLog");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/consoleLog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Console Log
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    v1GetInstanceConsoleLog(instanceId) {
      return this.v1GetInstanceConsoleLogWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Instance GPIOs
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GpiosState} and HTTP response
     */
    v1GetInstanceGpiosWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1GetInstanceGpios");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GpiosState;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/gpios', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Instance GPIOs
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GpiosState}
     */
    v1GetInstanceGpios(instanceId) {
      return this.v1GetInstanceGpiosWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Panics
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<Object>} and HTTP response
     */
    v1GetInstancePanicsWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1GetInstancePanics");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/panics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Panics
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<Object>}
     */
    v1GetInstancePanics(instanceId) {
      return this.v1GetInstancePanicsWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Instance Peripherals
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PeripheralsData} and HTTP response
     */
    v1GetInstancePeripheralsWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1GetInstancePeripherals");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PeripheralsData;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/peripherals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Instance Peripherals
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PeripheralsData}
     */
    v1GetInstancePeripherals(instanceId) {
      return this.v1GetInstancePeripheralsWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Instance Screenshot
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/String} format New peripherals state
     * @param {Object} opts Optional parameters
     * @param {Number} [scale] Screenshot scale 1:N
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    v1GetInstanceScreenshotWithHttpInfo(instanceId, format, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1GetInstanceScreenshot");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling v1GetInstanceScreenshot");
      }

      let pathParams = {
        'instanceId': instanceId,
        'format': format
      };
      let queryParams = {
        'scale': opts['scale']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['image/png', 'image/jpeg', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/screenshot.{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Instance Screenshot
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/String} format New peripherals state
     * @param {Object} opts Optional parameters
     * @param {Number} opts.scale Screenshot scale 1:N
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    v1GetInstanceScreenshot(instanceId, format, opts) {
      return this.v1GetInstanceScreenshotWithHttpInfo(instanceId, format, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Instance Snapshot
     * @param {String} instanceId Instance ID - uuid
     * @param {String} snapshotId Snapshot ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Snapshot} and HTTP response
     */
    v1GetInstanceSnapshotWithHttpInfo(instanceId, snapshotId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1GetInstanceSnapshot");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling v1GetInstanceSnapshot");
      }

      let pathParams = {
        'instanceId': instanceId,
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Snapshot;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/snapshots/{snapshotId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Instance Snapshot
     * @param {String} instanceId Instance ID - uuid
     * @param {String} snapshotId Snapshot ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Snapshot}
     */
    v1GetInstanceSnapshot(instanceId, snapshotId) {
      return this.v1GetInstanceSnapshotWithHttpInfo(instanceId, snapshotId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Instance Snapshots
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Snapshot>} and HTTP response
     */
    v1GetInstanceSnapshotsWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1GetInstanceSnapshots");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Snapshot];
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/snapshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Instance Snapshots
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Snapshot>}
     */
    v1GetInstanceSnapshots(instanceId) {
      return this.v1GetInstanceSnapshotsWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Instances
     * @param {Object} opts Optional parameters
     * @param {String} [name] Optionally filter by instance name
     * @param {Array.<String>} [returnAttr] Attributes to include in instance return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Instance>} and HTTP response
     */
    v1GetInstancesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'returnAttr': this.apiClient.buildCollectionParam(opts['returnAttr'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Instance];
      return this.apiClient.callApi(
        '/v1/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Instances
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Optionally filter by instance name
     * @param {Array.<String>} opts.returnAttr Attributes to include in instance return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Instance>}
     */
    v1GetInstances(opts) {
      return this.v1GetInstancesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Software for Model
     * @param {String} model Model to list available software for
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Firmware>} and HTTP response
     */
    v1GetModelSoftwareWithHttpInfo(model) {
      let postBody = null;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling v1GetModelSoftware");
      }

      let pathParams = {
        'model': model
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Firmware];
      return this.apiClient.callApi(
        '/v1/models/{model}/software', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Software for Model
     * @param {String} model Model to list available software for
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Firmware>}
     */
    v1GetModelSoftware(model) {
      return this.v1GetModelSoftwareWithHttpInfo(model)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Supported Models
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Model>} and HTTP response
     */
    v1GetModelsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Model];
      return this.apiClient.callApi(
        '/v1/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Supported Models
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Model>}
     */
    v1GetModels() {
      return this.v1GetModelsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return the configuration and per project statuses for a single network provider.
     * You must have the domain administrator or project administrator role to fetch a network connection.
     * @param {String} id Network Connection Identifier - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NetworkConnection} and HTTP response
     */
    v1GetNetworkConnectionWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1GetNetworkConnection");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NetworkConnection;
      return this.apiClient.callApi(
        '/v1/network/connections/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Return the configuration and per project statuses for a single network provider.
     * You must have the domain administrator or project administrator role to fetch a network connection.
     * @param {String} id Network Connection Identifier - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NetworkConnection}
     */
    v1GetNetworkConnection(id) {
      return this.v1GetNetworkConnectionWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a Project
     * @param {String} projectId Project ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
     */
    v1GetProjectWithHttpInfo(projectId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling v1GetProject");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/v1/projects/{projectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a Project
     * @param {String} projectId Project ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
     */
    v1GetProject(projectId) {
      return this.v1GetProjectWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Instances in Project
     * @param {String} projectId Project ID - uuid
     * @param {Object} opts Optional parameters
     * @param {String} [name] Filter by project name
     * @param {Array.<String>} [returnAttr] Attributes to include in instance return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Instance>} and HTTP response
     */
    v1GetProjectInstancesWithHttpInfo(projectId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling v1GetProjectInstances");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'name': opts['name'],
        'returnAttr': this.apiClient.buildCollectionParam(opts['returnAttr'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Instance];
      return this.apiClient.callApi(
        '/v1/projects/{projectId}/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Instances in Project
     * @param {String} projectId Project ID - uuid
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by project name
     * @param {Array.<String>} opts.returnAttr Attributes to include in instance return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Instance>}
     */
    v1GetProjectInstances(projectId, opts) {
      return this.v1GetProjectInstancesWithHttpInfo(projectId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Project Authorized Keys
     * @param {String} projectId Project ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ProjectKey>} and HTTP response
     */
    v1GetProjectKeysWithHttpInfo(projectId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling v1GetProjectKeys");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectKey];
      return this.apiClient.callApi(
        '/v1/projects/{projectId}/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Project Authorized Keys
     * @param {String} projectId Project ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ProjectKey>}
     */
    v1GetProjectKeys(projectId) {
      return this.v1GetProjectKeysWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve the network connection log for a project
     * @param {String} projectId Project ID (must be a valid UUID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    v1GetProjectNetworkLogWithHttpInfo(projectId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling v1GetProjectNetworkLog");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/projects/{projectId}/network/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve the network connection log for a project
     * @param {String} projectId Project ID (must be a valid UUID)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    v1GetProjectNetworkLog(projectId) {
      return this.v1GetProjectNetworkLogWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve the network connection status for a project
     * @param {String} projectId Project ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NetworkStatusResponse} and HTTP response
     */
    v1GetProjectNetworkStatusWithHttpInfo(projectId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling v1GetProjectNetworkStatus");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NetworkStatusResponse;
      return this.apiClient.callApi(
        '/v1/projects/{projectId}/network/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve the network connection status for a project
     * @param {String} projectId Project ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NetworkStatusResponse}
     */
    v1GetProjectNetworkStatus(projectId) {
      return this.v1GetProjectNetworkStatusWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Project VPN Configuration
     * A Project VPN allows connection _into_ virtual devices in the project (e.g., connecting a researcher's computer as a VPN client to a virtual device within the project). If a Project VPN has been defined, this will return the configuration.
     * @param {String} projectId Project ID - uuid
     * @param {module:model/String} format VPN Config format
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    v1GetProjectVpnConfigWithHttpInfo(projectId, format) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling v1GetProjectVpnConfig");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling v1GetProjectVpnConfig");
      }

      let pathParams = {
        'projectId': projectId,
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/x-openvpn-profile', 'application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/projects/{projectId}/vpnconfig/{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Project VPN Configuration
     * A Project VPN allows connection _into_ virtual devices in the project (e.g., connecting a researcher's computer as a VPN client to a virtual device within the project). If a Project VPN has been defined, this will return the configuration.
     * @param {String} projectId Project ID - uuid
     * @param {module:model/String} format VPN Config format
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    v1GetProjectVpnConfig(projectId, format) {
      return this.v1GetProjectVpnConfigWithHttpInfo(projectId, format)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Projects
     * @param {Object} opts Optional parameters
     * @param {String} [name] Filter by project name
     * @param {Boolean} [idsOnly] Only include id of project in results
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Project>} and HTTP response
     */
    v1GetProjectsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'ids_only': opts['idsOnly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Project];
      return this.apiClient.callApi(
        '/v1/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by project name
     * @param {Boolean} opts.idsOnly Only include id of project in results
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Project>}
     */
    v1GetProjects(opts) {
      return this.v1GetProjectsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send Password Reset Link Info
     * @param {String} token Reset token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    v1GetResetLinkInfoWithHttpInfo(token) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling v1GetResetLinkInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/users/reset-link-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Send Password Reset Link Info
     * @param {String} token Reset token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    v1GetResetLinkInfo(token) {
      return this.v1GetResetLinkInfoWithHttpInfo(token)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get service provider metadata xml from an auth provider
     * @param {String} providerId Provider ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    v1GetServiceProviderMetadataWithHttpInfo(providerId) {
      let postBody = null;
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling v1GetServiceProviderMetadata");
      }

      let pathParams = {
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/auth/providers/:providerId/spmetadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get service provider metadata xml from an auth provider
     * @param {String} providerId Provider ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    v1GetServiceProviderMetadata(providerId) {
      return this.v1GetServiceProviderMetadataWithHttpInfo(providerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch shared snapshots
     * Fetch snapshots shared with and shared by the requesting user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserSnapshots} and HTTP response
     */
    v1GetSharedSnapshotsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserSnapshots;
      return this.apiClient.callApi(
        '/v1/snapshots/shared', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch shared snapshots
     * Fetch snapshots shared with and shared by the requesting user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserSnapshots}
     */
    v1GetSharedSnapshots() {
      return this.v1GetSharedSnapshotsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Snapshot
     * @param {String} snapshotId Snapshot ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Snapshot} and HTTP response
     */
    v1GetSnapshotWithHttpInfo(snapshotId) {
      let postBody = null;
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling v1GetSnapshot");
      }

      let pathParams = {
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Snapshot;
      return this.apiClient.callApi(
        '/v1/snapshots/{snapshotId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Snapshot
     * @param {String} snapshotId Snapshot ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Snapshot}
     */
    v1GetSnapshot(snapshotId) {
      return this.v1GetSnapshotWithHttpInfo(snapshotId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Inject a message into an iOS VM
     * Given a message and source phone number, place this message as an incoming SMS message on the iOS VM. For advanced usage, a raw message of bytes may be sent. In this case, the parameter should provide hex encoded bytes  (0x00 0x11 0x22 0x33 in the example below) which are sent verbatim.  The user must ensure that the body is the correct format for the underlying device stack.
     * @param {String} instanceId Instance ID - uuid
     * @param {Object.<String, Object>} body Message data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1InstancesInstanceIdMessagePostWithHttpInfo(instanceId, body) {
      let postBody = body;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1InstancesInstanceIdMessagePost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v1InstancesInstanceIdMessagePost");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/message', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Inject a message into an iOS VM
     * Given a message and source phone number, place this message as an incoming SMS message on the iOS VM. For advanced usage, a raw message of bytes may be sent. In this case, the parameter should provide hex encoded bytes  (0x00 0x11 0x22 0x33 in the example below) which are sent verbatim.  The user must ensure that the body is the correct format for the underlying device stack.
     * @param {String} instanceId Instance ID - uuid
     * @param {Object.<String, Object>} body Message data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1InstancesInstanceIdMessagePost(instanceId, body) {
      return this.v1InstancesInstanceIdMessagePostWithHttpInfo(instanceId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download a netdump pcap file
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    v1InstancesInstanceIdNetdumpPcapGetWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1InstancesInstanceIdNetdumpPcapGet");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/vnd.tcpdump.pcap', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/netdump.pcap', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Download a netdump pcap file
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    v1InstancesInstanceIdNetdumpPcapGet(instanceId) {
      return this.v1InstancesInstanceIdNetdumpPcapGetWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download a Network Monitor pcap file
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    v1InstancesInstanceIdNetworkMonitorPcapGetWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1InstancesInstanceIdNetworkMonitorPcapGet");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/vnd.tcpdump.pcap', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/networkMonitor.pcap', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Download a Network Monitor pcap file
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    v1InstancesInstanceIdNetworkMonitorPcapGet(instanceId) {
      return this.v1InstancesInstanceIdNetworkMonitorPcapGetWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Kernel extension ranges
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Kcrange>} and HTTP response
     */
    v1KcrangeWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1Kcrange");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Kcrange];
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/btrace-kcrange', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Kernel extension ranges
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Kcrange>}
     */
    v1Kcrange(instanceId) {
      return this.v1KcrangeWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List available network connections
     * You must have the domain administrator or project administrator role to list network connections.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] The maximum number of items to return.
     * @param {Number} [offset] The starting index of the items to return.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NetworkConnectionOffsetPaginationResult} and HTTP response
     */
    v1ListNetworkConnectionsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NetworkConnectionOffsetPaginationResult;
      return this.apiClient.callApi(
        '/v1/network/connections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List available network connections
     * You must have the domain administrator or project administrator role to list network connections.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of items to return.
     * @param {Number} opts.offset The starting index of the items to return.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NetworkConnectionOffsetPaginationResult}
     */
    v1ListNetworkConnections(opts) {
      return this.v1ListNetworkConnectionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List available physical network interfaces
     * Lists available physical network interfaces that can be used for VLAN configuration. You must have the domain administrator role to list network interfaces.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    v1ListNetworkInterfacesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/v1/network/interfaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List available physical network interfaces
     * Lists available physical network interfaces that can be used for VLAN configuration. You must have the domain administrator role to list network interfaces.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    v1ListNetworkInterfaces() {
      return this.v1ListNetworkInterfacesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List available network providers
     * Provides a list of registered network providers to be used when [creating network connections](#post-/v1/network/connections). You must have the domain administrator role to list network providers.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NetworkConnectionProviderOffsetPaginationResult} and HTTP response
     */
    v1ListNetworkProvidersWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NetworkConnectionProviderOffsetPaginationResult;
      return this.apiClient.callApi(
        '/v1/network/providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List available network providers
     * Provides a list of registered network providers to be used when [creating network connections](#post-/v1/network/connections). You must have the domain administrator role to list network providers.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NetworkConnectionProviderOffsetPaginationResult}
     */
    v1ListNetworkProviders() {
      return this.v1ListNetworkProvidersWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Running Threads (CoreTrace)
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/KernelTask>} and HTTP response
     */
    v1ListThreadsWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1ListThreads");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [KernelTask];
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/strace/thread-list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Running Threads (CoreTrace)
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/KernelTask>}
     */
    v1ListThreads(instanceId) {
      return this.v1ListThreadsWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Start playing media
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/MediaPlayBody} mediaPlayBody Request Body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1MediaPlayWithHttpInfo(instanceId, mediaPlayBody) {
      let postBody = mediaPlayBody;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1MediaPlay");
      }
      // verify the required parameter 'mediaPlayBody' is set
      if (mediaPlayBody === undefined || mediaPlayBody === null) {
        throw new Error("Missing the required parameter 'mediaPlayBody' when calling v1MediaPlay");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/media/play', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Start playing media
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/MediaPlayBody} mediaPlayBody Request Body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1MediaPlay(instanceId, mediaPlayBody) {
      return this.v1MediaPlayWithHttpInfo(instanceId, mediaPlayBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Stop playing media
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1MediaStopWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1MediaStop");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/media/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Stop playing media
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1MediaStop(instanceId) {
      return this.v1MediaStopWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Network Connection (partial)
     * Only updates the specified attributes. You must have the domain administrator role to update a network connection.
     * @param {String} id Network Connection Identifier - uuid
     * @param {module:model/UpdateNetworkConnectionOptions} updateNetworkConnectionOptions Network Connection Options
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force] Force deletion (true only or not present)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1PartialUpdateNetworkConnectionWithHttpInfo(id, updateNetworkConnectionOptions, opts) {
      opts = opts || {};
      let postBody = updateNetworkConnectionOptions;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1PartialUpdateNetworkConnection");
      }
      // verify the required parameter 'updateNetworkConnectionOptions' is set
      if (updateNetworkConnectionOptions === undefined || updateNetworkConnectionOptions === null) {
        throw new Error("Missing the required parameter 'updateNetworkConnectionOptions' when calling v1PartialUpdateNetworkConnection");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/network/connections/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Network Connection (partial)
     * Only updates the specified attributes. You must have the domain administrator role to update a network connection.
     * @param {String} id Network Connection Identifier - uuid
     * @param {module:model/UpdateNetworkConnectionOptions} updateNetworkConnectionOptions Network Connection Options
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force Force deletion (true only or not present)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1PartialUpdateNetworkConnection(id, updateNetworkConnectionOptions, opts) {
      return this.v1PartialUpdateNetworkConnectionWithHttpInfo(id, updateNetworkConnectionOptions, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Instance
     * @param {String} instanceId Instance ID
     * @param {module:model/PatchInstanceOptions} patchInstanceOptions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Instance} and HTTP response
     */
    v1PatchInstanceWithHttpInfo(instanceId, patchInstanceOptions) {
      let postBody = patchInstanceOptions;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1PatchInstance");
      }
      // verify the required parameter 'patchInstanceOptions' is set
      if (patchInstanceOptions === undefined || patchInstanceOptions === null) {
        throw new Error("Missing the required parameter 'patchInstanceOptions' when calling v1PatchInstance");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Instance;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Instance
     * @param {String} instanceId Instance ID
     * @param {module:model/PatchInstanceOptions} patchInstanceOptions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Instance}
     */
    v1PatchInstance(instanceId, patchInstanceOptions) {
      return this.v1PatchInstanceWithHttpInfo(instanceId, patchInstanceOptions)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Pause an Instance
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1PauseInstanceWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1PauseInstance");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/pause', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Pause an Instance
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1PauseInstance(instanceId) {
      return this.v1PauseInstanceWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Provide Instance Input
     * Sends a touch or button event to the VM.  - Buttons (or keys) to be held during the input are specified as an array of strings, each string must be either a single ascii character or one of the following keywords:   - VM Buttons: finger, homeButton, holdButton, volumeUp, volumeDown, ringerSwitch, backButton, overviewButton   - Keyboard Buttons: again, alt, alterase, apostrophe, back, backslash, backspace, bassboost, bookmarks, bsp, calc, camera, cancel, caps, capslock, chat, close, closecd, comma, compose, computer, config, connect, copy, ctrl, cut, cyclewindows, dashboard, del, delete, deletefile, dot, down, edit, eject, ejectclose, email, end, enter, equal, esc, escape, exit, f1, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f2, f20, f21, f22, f23, f24, f3, f4, f5, f6, f7, f8, f9, fastfwd, file, finance, find, forward, front, grave, hangeul, hanja, help, henkan, home, homepage, hp, hrgn, ins, insert, iso, k102, kp0, kp1, kp2, kp3, kp4, kp5, kp6, kp7, kp8, kp9, kpasterisk, kpcomma, kpdot, kpenter, kpequal, kpjpcomma, kpleftparen, kpminus, kpplus, kpplusminus, kprightparen, kpslash, ktkn, ktknhrgn, left, leftalt, leftbrace, leftctrl, leftmeta, leftshift, linefeed, macro, mail, menu, meta, minus, move, msdos, muhenkan, mute, new, next, numlock, open, pagedown, pageup, paste, pause, pausecd, pgdn, pgup, phone, play, playcd, playpause, power, previous, print, prog1, prog2, prog3, prog4, props, question, record, redo, refresh, return, rewind, right, rightalt, rightbrace, rightctrl, rightmeta, rightshift, ro, rotate, scale, screenlock, scrolldown, scrolllock, scrollup, search, semicolon, sendfile, setup, shift, shop, slash, sleep, sound, space, sport, stop, stopcd, suspend, sysrq, tab, undo, up, voldown, volup, wakeup, www, xfer, yen, zkhk
     * @param {String} instanceId Instance ID - uuid
     * @param {Array.<module:model/InstanceInput>} instanceInput The input to send to the VM
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InputResponse} and HTTP response
     */
    v1PostInstanceInputWithHttpInfo(instanceId, instanceInput) {
      let postBody = instanceInput;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1PostInstanceInput");
      }
      // verify the required parameter 'instanceInput' is set
      if (instanceInput === undefined || instanceInput === null) {
        throw new Error("Missing the required parameter 'instanceInput' when calling v1PostInstanceInput");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InputResponse;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/input', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Provide Instance Input
     * Sends a touch or button event to the VM.  - Buttons (or keys) to be held during the input are specified as an array of strings, each string must be either a single ascii character or one of the following keywords:   - VM Buttons: finger, homeButton, holdButton, volumeUp, volumeDown, ringerSwitch, backButton, overviewButton   - Keyboard Buttons: again, alt, alterase, apostrophe, back, backslash, backspace, bassboost, bookmarks, bsp, calc, camera, cancel, caps, capslock, chat, close, closecd, comma, compose, computer, config, connect, copy, ctrl, cut, cyclewindows, dashboard, del, delete, deletefile, dot, down, edit, eject, ejectclose, email, end, enter, equal, esc, escape, exit, f1, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f2, f20, f21, f22, f23, f24, f3, f4, f5, f6, f7, f8, f9, fastfwd, file, finance, find, forward, front, grave, hangeul, hanja, help, henkan, home, homepage, hp, hrgn, ins, insert, iso, k102, kp0, kp1, kp2, kp3, kp4, kp5, kp6, kp7, kp8, kp9, kpasterisk, kpcomma, kpdot, kpenter, kpequal, kpjpcomma, kpleftparen, kpminus, kpplus, kpplusminus, kprightparen, kpslash, ktkn, ktknhrgn, left, leftalt, leftbrace, leftctrl, leftmeta, leftshift, linefeed, macro, mail, menu, meta, minus, move, msdos, muhenkan, mute, new, next, numlock, open, pagedown, pageup, paste, pause, pausecd, pgdn, pgup, phone, play, playcd, playpause, power, previous, print, prog1, prog2, prog3, prog4, props, question, record, redo, refresh, return, rewind, right, rightalt, rightbrace, rightctrl, rightmeta, rightshift, ro, rotate, scale, screenlock, scrolldown, scrolllock, scrollup, search, semicolon, sendfile, setup, shift, shop, slash, sleep, sound, space, sport, stop, stopcd, suspend, sysrq, tab, undo, up, voldown, volup, wakeup, www, xfer, yen, zkhk
     * @param {String} instanceId Instance ID - uuid
     * @param {Array.<module:model/InstanceInput>} instanceInput The input to send to the VM
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InputResponse}
     */
    v1PostInstanceInput(instanceId, instanceInput) {
      return this.v1PostInstanceInputWithHttpInfo(instanceId, instanceInput)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * API Status
     * Check if  API is ready for queries
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1ReadyWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/ready', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * API Status
     * Check if  API is ready for queries
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1Ready() {
      return this.v1ReadyWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reboot an Instance
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1RebootInstanceWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1RebootInstance");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/reboot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reboot an Instance
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1RebootInstance(instanceId) {
      return this.v1RebootInstanceWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Project Authorized Key
     * @param {String} projectId Project ID - uuid
     * @param {String} keyId Key ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1RemoveProjectKeyWithHttpInfo(projectId, keyId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling v1RemoveProjectKey");
      }
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling v1RemoveProjectKey");
      }

      let pathParams = {
        'projectId': projectId,
        'keyId': keyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projects/{projectId}/keys/{keyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Project Authorized Key
     * @param {String} projectId Project ID - uuid
     * @param {String} keyId Key ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1RemoveProjectKey(projectId, keyId) {
      return this.v1RemoveProjectKeyWithHttpInfo(projectId, keyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove team role from project
     * This endpoint is available for Enterprise accounts only
     * @param {String} projectId Project ID - uuid
     * @param {String} teamId Team ID - uuid
     * @param {String} roleId Role ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1RemoveTeamRoleFromProjectWithHttpInfo(projectId, teamId, roleId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling v1RemoveTeamRoleFromProject");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling v1RemoveTeamRoleFromProject");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling v1RemoveTeamRoleFromProject");
      }

      let pathParams = {
        'projectId': projectId,
        'teamId': teamId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/roles/projects/{projectId}/teams/{teamId}/roles/{roleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove team role from project
     * This endpoint is available for Enterprise accounts only
     * @param {String} projectId Project ID - uuid
     * @param {String} teamId Team ID - uuid
     * @param {String} roleId Role ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1RemoveTeamRoleFromProject(projectId, teamId, roleId) {
      return this.v1RemoveTeamRoleFromProjectWithHttpInfo(projectId, teamId, roleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove user from team
     * This endpoint is available for Enterprise accounts only
     * @param {String} teamId Team ID - uuid
     * @param {String} userId User ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1RemoveUserFromTeamWithHttpInfo(teamId, userId) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling v1RemoveUserFromTeam");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling v1RemoveUserFromTeam");
      }

      let pathParams = {
        'teamId': teamId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/teams/{teamId}/users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove user from team
     * This endpoint is available for Enterprise accounts only
     * @param {String} teamId Team ID - uuid
     * @param {String} userId User ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1RemoveUserFromTeam(teamId, userId) {
      return this.v1RemoveUserFromTeamWithHttpInfo(teamId, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove user role from project
     * This endpoint is available for Enterprise accounts only
     * @param {String} projectId Project ID - uuid
     * @param {String} userId User ID - uuid
     * @param {String} roleId Role ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1RemoveUserRoleFromProjectWithHttpInfo(projectId, userId, roleId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling v1RemoveUserRoleFromProject");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling v1RemoveUserRoleFromProject");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling v1RemoveUserRoleFromProject");
      }

      let pathParams = {
        'projectId': projectId,
        'userId': userId,
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/roles/projects/{projectId}/users/{userId}/roles/{roleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove user role from project
     * This endpoint is available for Enterprise accounts only
     * @param {String} projectId Project ID - uuid
     * @param {String} userId User ID - uuid
     * @param {String} roleId Role ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1RemoveUserRoleFromProject(projectId, userId, roleId) {
      return this.v1RemoveUserRoleFromProjectWithHttpInfo(projectId, userId, roleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Rename an Instance Snapshot
     * @param {String} instanceId Instance ID - uuid
     * @param {String} snapshotId Snapshot ID - uuid
     * @param {module:model/SnapshotCreationOptions} snapshotCreationOptions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Snapshot} and HTTP response
     */
    v1RenameInstanceSnapshotWithHttpInfo(instanceId, snapshotId, snapshotCreationOptions) {
      let postBody = snapshotCreationOptions;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1RenameInstanceSnapshot");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling v1RenameInstanceSnapshot");
      }
      // verify the required parameter 'snapshotCreationOptions' is set
      if (snapshotCreationOptions === undefined || snapshotCreationOptions === null) {
        throw new Error("Missing the required parameter 'snapshotCreationOptions' when calling v1RenameInstanceSnapshot");
      }

      let pathParams = {
        'instanceId': instanceId,
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Snapshot;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/snapshots/{snapshotId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Rename an Instance Snapshot
     * @param {String} instanceId Instance ID - uuid
     * @param {String} snapshotId Snapshot ID - uuid
     * @param {module:model/SnapshotCreationOptions} snapshotCreationOptions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Snapshot}
     */
    v1RenameInstanceSnapshot(instanceId, snapshotId, snapshotCreationOptions) {
      return this.v1RenameInstanceSnapshotWithHttpInfo(instanceId, snapshotId, snapshotCreationOptions)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reset User Password
     * @param {module:model/PasswordResetBody} passwordResetBody application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1ResetUserPasswordWithHttpInfo(passwordResetBody) {
      let postBody = passwordResetBody;
      // verify the required parameter 'passwordResetBody' is set
      if (passwordResetBody === undefined || passwordResetBody === null) {
        throw new Error("Missing the required parameter 'passwordResetBody' when calling v1ResetUserPassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/reset-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reset User Password
     * @param {module:model/PasswordResetBody} passwordResetBody application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1ResetUserPassword(passwordResetBody) {
      return this.v1ResetUserPasswordWithHttpInfo(passwordResetBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Restore backup
     * @param {String} instanceId Instance ID - uuid
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] Restore backup data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1RestoreBackupWithHttpInfo(instanceId, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1RestoreBackup");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/restoreBackup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Restore backup
     * @param {String} instanceId Instance ID - uuid
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} opts.body Restore backup data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1RestoreBackup(instanceId, opts) {
      return this.v1RestoreBackupWithHttpInfo(instanceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Restore an Instance Snapshot
     * @param {String} instanceId Instance ID - uuid
     * @param {String} snapshotId Snapshot ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1RestoreInstanceSnapshotWithHttpInfo(instanceId, snapshotId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1RestoreInstanceSnapshot");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling v1RestoreInstanceSnapshot");
      }

      let pathParams = {
        'instanceId': instanceId,
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/snapshots/{snapshotId}/restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Restore an Instance Snapshot
     * @param {String} instanceId Instance ID - uuid
     * @param {String} snapshotId Snapshot ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1RestoreInstanceSnapshot(instanceId, snapshotId) {
      return this.v1RestoreInstanceSnapshotWithHttpInfo(instanceId, snapshotId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all roles
     * This endpoint is available for Enterprise accounts only
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Role>} and HTTP response
     */
    v1RolesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Role];
      return this.apiClient.callApi(
        '/v1/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all roles
     * This endpoint is available for Enterprise accounts only
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Role>}
     */
    v1Roles() {
      return this.v1RolesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Rotate device to specified orientation
     * Rotate device to orientation.  Accepted orientations: 1. Portrait 2. Portrait vertically inverted (up-side-down) 3. Landscape with top of the device to the left 4. Landscape with top of the device to the right
     * @param {String} instanceId 
     * @param {module:model/RotateBody} rotateBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1RotateInstanceWithHttpInfo(instanceId, rotateBody) {
      let postBody = rotateBody;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1RotateInstance");
      }
      // verify the required parameter 'rotateBody' is set
      if (rotateBody === undefined || rotateBody === null) {
        throw new Error("Missing the required parameter 'rotateBody' when calling v1RotateInstance");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/rotate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Rotate device to specified orientation
     * Rotate device to orientation.  Accepted orientations: 1. Portrait 2. Portrait vertically inverted (up-side-down) 3. Landscape with top of the device to the left 4. Landscape with top of the device to the right
     * @param {String} instanceId 
     * @param {module:model/RotateBody} rotateBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1RotateInstance(instanceId, rotateBody) {
      return this.v1RotateInstanceWithHttpInfo(instanceId, rotateBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send Password Reset Link
     * @param {module:model/ResetLinkBody} resetLinkBody application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1SendUserResetLinkWithHttpInfo(resetLinkBody) {
      let postBody = resetLinkBody;
      // verify the required parameter 'resetLinkBody' is set
      if (resetLinkBody === undefined || resetLinkBody === null) {
        throw new Error("Missing the required parameter 'resetLinkBody' when calling v1SendUserResetLink");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/send-reset-link', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Send Password Reset Link
     * @param {module:model/ResetLinkBody} resetLinkBody application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1SendUserResetLink(resetLinkBody) {
      return this.v1SendUserResetLinkWithHttpInfo(resetLinkBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set Instance GPIOs
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/GpiosState} gpiosState New GPIO state
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GpiosState} and HTTP response
     */
    v1SetInstanceGpiosWithHttpInfo(instanceId, gpiosState) {
      let postBody = gpiosState;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1SetInstanceGpios");
      }
      // verify the required parameter 'gpiosState' is set
      if (gpiosState === undefined || gpiosState === null) {
        throw new Error("Missing the required parameter 'gpiosState' when calling v1SetInstanceGpios");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GpiosState;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/gpios', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set Instance GPIOs
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/GpiosState} gpiosState New GPIO state
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GpiosState}
     */
    v1SetInstanceGpios(instanceId, gpiosState) {
      return this.v1SetInstanceGpiosWithHttpInfo(instanceId, gpiosState)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set Instance Peripherals
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/PeripheralsData} peripheralsData New peripherals state
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PeripheralsData} and HTTP response
     */
    v1SetInstancePeripheralsWithHttpInfo(instanceId, peripheralsData) {
      let postBody = peripheralsData;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1SetInstancePeripherals");
      }
      // verify the required parameter 'peripheralsData' is set
      if (peripheralsData === undefined || peripheralsData === null) {
        throw new Error("Missing the required parameter 'peripheralsData' when calling v1SetInstancePeripherals");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PeripheralsData;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/peripherals', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set Instance Peripherals
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/PeripheralsData} peripheralsData New peripherals state
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PeripheralsData}
     */
    v1SetInstancePeripherals(instanceId, peripheralsData) {
      return this.v1SetInstancePeripheralsWithHttpInfo(instanceId, peripheralsData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set state of Instance
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/V1SetStateBody} v1SetStateBody Desired State
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1SetInstanceStateWithHttpInfo(instanceId, v1SetStateBody) {
      let postBody = v1SetStateBody;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1SetInstanceState");
      }
      // verify the required parameter 'v1SetStateBody' is set
      if (v1SetStateBody === undefined || v1SetStateBody === null) {
        throw new Error("Missing the required parameter 'v1SetStateBody' when calling v1SetInstanceState");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/state', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set state of Instance
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/V1SetStateBody} v1SetStateBody Desired State
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1SetInstanceState(instanceId, v1SetStateBody) {
      return this.v1SetInstanceStateWithHttpInfo(instanceId, v1SetStateBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set member list
     * Sets the list of members who have access to the snapshot
     * @param {String} snapshotId Snapshot ID - uuid
     * @param {module:model/SnapshotPermissionsRequestPayload} snapshotPermissionsRequestPayload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Snapshot} and HTTP response
     */
    v1SetSnapshotPermissionsWithHttpInfo(snapshotId, snapshotPermissionsRequestPayload) {
      let postBody = snapshotPermissionsRequestPayload;
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling v1SetSnapshotPermissions");
      }
      // verify the required parameter 'snapshotPermissionsRequestPayload' is set
      if (snapshotPermissionsRequestPayload === undefined || snapshotPermissionsRequestPayload === null) {
        throw new Error("Missing the required parameter 'snapshotPermissionsRequestPayload' when calling v1SetSnapshotPermissions");
      }

      let pathParams = {
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Snapshot;
      return this.apiClient.callApi(
        '/v1/snapshots/{snapshotId}/permissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set member list
     * Sets the list of members who have access to the snapshot
     * @param {String} snapshotId Snapshot ID - uuid
     * @param {module:model/SnapshotPermissionsRequestPayload} snapshotPermissionsRequestPayload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Snapshot}
     */
    v1SetSnapshotPermissions(snapshotId, snapshotPermissionsRequestPayload) {
      return this.v1SetSnapshotPermissionsWithHttpInfo(snapshotId, snapshotPermissionsRequestPayload)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Share snapshot
     * Share a snapshot
     * @param {String} snapshotId Snapshot ID - uuid
     * @param {module:model/PostShareSnapshotRequestPayload} postShareSnapshotRequestPayload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Snapshot} and HTTP response
     */
    v1ShareSnapshotWithHttpInfo(snapshotId, postShareSnapshotRequestPayload) {
      let postBody = postShareSnapshotRequestPayload;
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling v1ShareSnapshot");
      }
      // verify the required parameter 'postShareSnapshotRequestPayload' is set
      if (postShareSnapshotRequestPayload === undefined || postShareSnapshotRequestPayload === null) {
        throw new Error("Missing the required parameter 'postShareSnapshotRequestPayload' when calling v1ShareSnapshot");
      }

      let pathParams = {
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Snapshot;
      return this.apiClient.callApi(
        '/v1/snapshots/{snapshotId}/share', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Share snapshot
     * Share a snapshot
     * @param {String} snapshotId Snapshot ID - uuid
     * @param {module:model/PostShareSnapshotRequestPayload} postShareSnapshotRequestPayload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Snapshot}
     */
    v1ShareSnapshot(snapshotId, postShareSnapshotRequestPayload) {
      return this.v1ShareSnapshotWithHttpInfo(snapshotId, postShareSnapshotRequestPayload)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Rename a Snapshot
     * @param {String} snapshotId Snapshot ID - uuid
     * @param {module:model/SnapshotCreationOptions} snapshotCreationOptions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Snapshot} and HTTP response
     */
    v1SnapshotRenameWithHttpInfo(snapshotId, snapshotCreationOptions) {
      let postBody = snapshotCreationOptions;
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling v1SnapshotRename");
      }
      // verify the required parameter 'snapshotCreationOptions' is set
      if (snapshotCreationOptions === undefined || snapshotCreationOptions === null) {
        throw new Error("Missing the required parameter 'snapshotCreationOptions' when calling v1SnapshotRename");
      }

      let pathParams = {
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Snapshot;
      return this.apiClient.callApi(
        '/v1/snapshots/{snapshotId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Rename a Snapshot
     * @param {String} snapshotId Snapshot ID - uuid
     * @param {module:model/SnapshotCreationOptions} snapshotCreationOptions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Snapshot}
     */
    v1SnapshotRename(snapshotId, snapshotCreationOptions) {
      return this.v1SnapshotRenameWithHttpInfo(snapshotId, snapshotCreationOptions)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Start CoreTrace on an instance
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1StartCoreTraceWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1StartCoreTrace");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/strace/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Start CoreTrace on an instance
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1StartCoreTrace(instanceId) {
      return this.v1StartCoreTraceWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Start HyperTrace on an instance
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/BtraceEnableOptions} btraceEnableOptions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1StartHyperTraceWithHttpInfo(instanceId, btraceEnableOptions) {
      let postBody = btraceEnableOptions;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1StartHyperTrace");
      }
      // verify the required parameter 'btraceEnableOptions' is set
      if (btraceEnableOptions === undefined || btraceEnableOptions === null) {
        throw new Error("Missing the required parameter 'btraceEnableOptions' when calling v1StartHyperTrace");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/btrace/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Start HyperTrace on an instance
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/BtraceEnableOptions} btraceEnableOptions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1StartHyperTrace(instanceId, btraceEnableOptions) {
      return this.v1StartHyperTraceWithHttpInfo(instanceId, btraceEnableOptions)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Start an Instance
     * @param {String} instanceId Instance ID - uuid
     * @param {Object} opts Optional parameters
     * @param {module:model/InstanceStartOptions} [instanceStartOptions] Start options
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1StartInstanceWithHttpInfo(instanceId, opts) {
      opts = opts || {};
      let postBody = opts['instanceStartOptions'];
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1StartInstance");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Start an Instance
     * @param {String} instanceId Instance ID - uuid
     * @param {Object} opts Optional parameters
     * @param {module:model/InstanceStartOptions} opts.instanceStartOptions Start options
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1StartInstance(instanceId, opts) {
      return this.v1StartInstanceWithHttpInfo(instanceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Start Enhanced Network Monitor on an instance.
     * @param {String} instanceId Instance ID - uuid
     * @param {Object} opts Optional parameters
     * @param {module:model/NetdumpFilter} [netdumpFilter] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1StartNetdumpWithHttpInfo(instanceId, opts) {
      opts = opts || {};
      let postBody = opts['netdumpFilter'];
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1StartNetdump");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/netdump/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Start Enhanced Network Monitor on an instance.
     * @param {String} instanceId Instance ID - uuid
     * @param {Object} opts Optional parameters
     * @param {module:model/NetdumpFilter} opts.netdumpFilter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1StartNetdump(instanceId, opts) {
      return this.v1StartNetdumpWithHttpInfo(instanceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Start Network Monitor on an instance.
     * @param {String} instanceId Instance ID - uuid
     * @param {Object} opts Optional parameters
     * @param {module:model/SslsplitFilter} [sslsplitFilter] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1StartNetworkMonitorWithHttpInfo(instanceId, opts) {
      opts = opts || {};
      let postBody = opts['sslsplitFilter'];
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1StartNetworkMonitor");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/sslsplit/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Start Network Monitor on an instance.
     * @param {String} instanceId Instance ID - uuid
     * @param {Object} opts Optional parameters
     * @param {module:model/SslsplitFilter} opts.sslsplitFilter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1StartNetworkMonitor(instanceId, opts) {
      return this.v1StartNetworkMonitorWithHttpInfo(instanceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Stop CoreTrace on an instance.
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1StopCoreTraceWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1StopCoreTrace");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/strace/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Stop CoreTrace on an instance.
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1StopCoreTrace(instanceId) {
      return this.v1StopCoreTraceWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Stop HyperTrace on an instance.
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1StopHyperTraceWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1StopHyperTrace");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/btrace/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Stop HyperTrace on an instance.
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1StopHyperTrace(instanceId) {
      return this.v1StopHyperTraceWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Stop an Instance
     * @param {String} instanceId Instance ID - uuid
     * @param {Object} opts Optional parameters
     * @param {module:model/InstanceStopOptions} [instanceStopOptions] Stop options
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1StopInstanceWithHttpInfo(instanceId, opts) {
      opts = opts || {};
      let postBody = opts['instanceStopOptions'];
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1StopInstance");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Stop an Instance
     * @param {String} instanceId Instance ID - uuid
     * @param {Object} opts Optional parameters
     * @param {module:model/InstanceStopOptions} opts.instanceStopOptions Stop options
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1StopInstance(instanceId, opts) {
      return this.v1StopInstanceWithHttpInfo(instanceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Stop Enhanced Network Monitor on an instance.
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1StopNetdumpWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1StopNetdump");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/netdump/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Stop Enhanced Network Monitor on an instance.
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1StopNetdump(instanceId) {
      return this.v1StopNetdumpWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Stop Network Monitor on an instance.
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1StopNetworkMonitorWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1StopNetworkMonitor");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/sslsplit/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Stop Network Monitor on an instance.
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1StopNetworkMonitor(instanceId) {
      return this.v1StopNetworkMonitorWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update team
     * This endpoint is available for Enterprise accounts only
     * @param {String} teamId Team ID - uuid
     * @param {module:model/CreateTeam} createTeam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1TeamChangeWithHttpInfo(teamId, createTeam) {
      let postBody = createTeam;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling v1TeamChange");
      }
      // verify the required parameter 'createTeam' is set
      if (createTeam === undefined || createTeam === null) {
        throw new Error("Missing the required parameter 'createTeam' when calling v1TeamChange");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/teams/{teamId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update team
     * This endpoint is available for Enterprise accounts only
     * @param {String} teamId Team ID - uuid
     * @param {module:model/CreateTeam} createTeam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1TeamChange(teamId, createTeam) {
      return this.v1TeamChangeWithHttpInfo(teamId, createTeam)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create team
     * This endpoint is available for Enterprise accounts only
     * @param {module:model/CreateTeam} createTeam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TeamCreate} and HTTP response
     */
    v1TeamCreateWithHttpInfo(createTeam) {
      let postBody = createTeam;
      // verify the required parameter 'createTeam' is set
      if (createTeam === undefined || createTeam === null) {
        throw new Error("Missing the required parameter 'createTeam' when calling v1TeamCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamCreate;
      return this.apiClient.callApi(
        '/v1/teams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create team
     * This endpoint is available for Enterprise accounts only
     * @param {module:model/CreateTeam} createTeam 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TeamCreate}
     */
    v1TeamCreate(createTeam) {
      return this.v1TeamCreateWithHttpInfo(createTeam)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete team
     * This endpoint is available for Enterprise accounts only
     * @param {String} teamId Team ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1TeamDeleteWithHttpInfo(teamId) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling v1TeamDelete");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/teams/{teamId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete team
     * This endpoint is available for Enterprise accounts only
     * @param {String} teamId Team ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1TeamDelete(teamId) {
      return this.v1TeamDeleteWithHttpInfo(teamId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get teams
     * This endpoint is available for Enterprise accounts only
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Team>} and HTTP response
     */
    v1TeamsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/v1/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get teams
     * This endpoint is available for Enterprise accounts only
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Team>}
     */
    v1Teams() {
      return this.v1TeamsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Unpause an Instance
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1UnpauseInstanceWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1UnpauseInstance");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/unpause', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Unpause an Instance
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1UnpauseInstance(instanceId) {
      return this.v1UnpauseInstanceWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an auth provider for a domain
     * @param {String} domainId Domain ID - uuid
     * @param {String} providerId Provider ID - uuid
     * @param {module:model/DomainAuthProviderRequest} domainAuthProviderRequest Request Data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DomainAuthProviderResponse} and HTTP response
     */
    v1UpdateDomainAuthProviderWithHttpInfo(domainId, providerId, domainAuthProviderRequest) {
      let postBody = domainAuthProviderRequest;
      // verify the required parameter 'domainId' is set
      if (domainId === undefined || domainId === null) {
        throw new Error("Missing the required parameter 'domainId' when calling v1UpdateDomainAuthProvider");
      }
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling v1UpdateDomainAuthProvider");
      }
      // verify the required parameter 'domainAuthProviderRequest' is set
      if (domainAuthProviderRequest === undefined || domainAuthProviderRequest === null) {
        throw new Error("Missing the required parameter 'domainAuthProviderRequest' when calling v1UpdateDomainAuthProvider");
      }

      let pathParams = {
        'domainId': domainId,
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DomainAuthProviderResponse;
      return this.apiClient.callApi(
        '/v1/domain/{domainId}/auth/{providerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an auth provider for a domain
     * @param {String} domainId Domain ID - uuid
     * @param {String} providerId Provider ID - uuid
     * @param {module:model/DomainAuthProviderRequest} domainAuthProviderRequest Request Data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DomainAuthProviderResponse}
     */
    v1UpdateDomainAuthProvider(domainId, providerId, domainAuthProviderRequest) {
      return this.v1UpdateDomainAuthProviderWithHttpInfo(domainId, providerId, domainAuthProviderRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing hypervisor hook
     * @param {String} hookId Hook ID
     * @param {module:model/V1CreateHookParameters} v1CreateHookParameters application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Hook} and HTTP response
     */
    v1UpdateHookWithHttpInfo(hookId, v1CreateHookParameters) {
      let postBody = v1CreateHookParameters;
      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling v1UpdateHook");
      }
      // verify the required parameter 'v1CreateHookParameters' is set
      if (v1CreateHookParameters === undefined || v1CreateHookParameters === null) {
        throw new Error("Missing the required parameter 'v1CreateHookParameters' when calling v1UpdateHook");
      }

      let pathParams = {
        'hookId': hookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Hook;
      return this.apiClient.callApi(
        '/v1/hooks/{hookId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an existing hypervisor hook
     * @param {String} hookId Hook ID
     * @param {module:model/V1CreateHookParameters} v1CreateHookParameters application/json
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Hook}
     */
    v1UpdateHook(hookId, v1CreateHookParameters) {
      return this.v1UpdateHookWithHttpInfo(hookId, v1CreateHookParameters)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Network Connection
     * You must have the domain administrator role to update a network connection.
     * @param {String} id Network Connection Identifier - uuid
     * @param {module:model/UpdateNetworkConnectionOptions} updateNetworkConnectionOptions Network Connection Options
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force] Force deletion (true only or not present)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NetworkConnection} and HTTP response
     */
    v1UpdateNetworkConnectionWithHttpInfo(id, updateNetworkConnectionOptions, opts) {
      opts = opts || {};
      let postBody = updateNetworkConnectionOptions;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1UpdateNetworkConnection");
      }
      // verify the required parameter 'updateNetworkConnectionOptions' is set
      if (updateNetworkConnectionOptions === undefined || updateNetworkConnectionOptions === null) {
        throw new Error("Missing the required parameter 'updateNetworkConnectionOptions' when calling v1UpdateNetworkConnection");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NetworkConnection;
      return this.apiClient.callApi(
        '/v1/network/connections/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Network Connection
     * You must have the domain administrator role to update a network connection.
     * @param {String} id Network Connection Identifier - uuid
     * @param {module:model/UpdateNetworkConnectionOptions} updateNetworkConnectionOptions Network Connection Options
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force Force deletion (true only or not present)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NetworkConnection}
     */
    v1UpdateNetworkConnection(id, updateNetworkConnectionOptions, opts) {
      return this.v1UpdateNetworkConnectionWithHttpInfo(id, updateNetworkConnectionOptions, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Project
     * @param {String} projectId Project ID - uuid
     * @param {module:model/Project} project Updated Project Settings
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
     */
    v1UpdateProjectWithHttpInfo(projectId, project) {
      let postBody = project;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling v1UpdateProject");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling v1UpdateProject");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/v1/projects/{projectId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Project
     * @param {String} projectId Project ID - uuid
     * @param {module:model/Project} project Updated Project Settings
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
     */
    v1UpdateProject(projectId, project) {
      return this.v1UpdateProjectWithHttpInfo(projectId, project)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change Project Settings
     * @param {String} projectId Project ID - uuid
     * @param {module:model/ProjectSettings} projectSettings New settings
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1UpdateProjectSettingsWithHttpInfo(projectId, projectSettings) {
      let postBody = projectSettings;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling v1UpdateProjectSettings");
      }
      // verify the required parameter 'projectSettings' is set
      if (projectSettings === undefined || projectSettings === null) {
        throw new Error("Missing the required parameter 'projectSettings' when calling v1UpdateProjectSettings");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/projects/{projectId}/settings', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Change Project Settings
     * @param {String} projectId Project ID - uuid
     * @param {module:model/ProjectSettings} projectSettings New settings
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1UpdateProjectSettings(projectId, projectSettings) {
      return this.v1UpdateProjectSettingsWithHttpInfo(projectId, projectSettings)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update User
     * @param {String} userId userId - uuid
     * @param {Object.<String, Object>} body User data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    v1UpdateUserWithHttpInfo(userId, body) {
      let postBody = body;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling v1UpdateUser");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v1UpdateUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/users/{userId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update User
     * @param {String} userId userId - uuid
     * @param {Object.<String, Object>} body User data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    v1UpdateUser(userId, body) {
      return this.v1UpdateUserWithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upgrade iOS version
     * @param {String} instanceId 
     * @param {module:model/InstanceUpgradeBody} instanceUpgradeBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1UpgradeInstanceWithHttpInfo(instanceId, instanceUpgradeBody) {
      let postBody = instanceUpgradeBody;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1UpgradeInstance");
      }
      // verify the required parameter 'instanceUpgradeBody' is set
      if (instanceUpgradeBody === undefined || instanceUpgradeBody === null) {
        throw new Error("Missing the required parameter 'instanceUpgradeBody' when calling v1UpgradeInstance");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/upgrade', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upgrade iOS version
     * @param {String} instanceId 
     * @param {module:model/InstanceUpgradeBody} instanceUpgradeBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1UpgradeInstance(instanceId, instanceUpgradeBody) {
      return this.v1UpgradeInstanceWithHttpInfo(instanceId, instanceUpgradeBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload Image Data
     * If the active project has enough remaining quota, updates an Image with the contents of the request body.
     * @param {String} imageId Image ID - uuid
     * @param {String} body Uploaded Image
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Image} and HTTP response
     */
    v1UploadImageDataWithHttpInfo(imageId, body) {
      let postBody = body;
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling v1UploadImageData");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v1UploadImageData");
      }

      let pathParams = {
        'imageId': imageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['binary'];
      let accepts = ['application/json'];
      let returnType = Image;
      return this.apiClient.callApi(
        '/v1/images/{imageId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upload Image Data
     * If the active project has enough remaining quota, updates an Image with the contents of the request body.
     * @param {String} imageId Image ID - uuid
     * @param {String} body Uploaded Image
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Image}
     */
    v1UploadImageData(imageId, body) {
      return this.v1UploadImageDataWithHttpInfo(imageId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Consent to the current terms and conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AgreedAck} and HTTP response
     */
    v1UserAgreeTermsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AgreedAck;
      return this.apiClient.callApi(
        '/v1/users/agree', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Consent to the current terms and conditions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AgreedAck}
     */
    v1UserAgreeTerms() {
      return this.v1UserAgreeTermsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change User Password
     * Authenticated solely by the old-password.
     * @param {module:model/PasswordChangeBody} passwordChangeBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1UsersChangePasswordPostWithHttpInfo(passwordChangeBody) {
      let postBody = passwordChangeBody;
      // verify the required parameter 'passwordChangeBody' is set
      if (passwordChangeBody === undefined || passwordChangeBody === null) {
        throw new Error("Missing the required parameter 'passwordChangeBody' when calling v1UsersChangePasswordPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/change-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Change User Password
     * Authenticated solely by the old-password.
     * @param {module:model/PasswordChangeBody} passwordChangeBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1UsersChangePasswordPost(passwordChangeBody) {
      return this.v1UsersChangePasswordPostWithHttpInfo(passwordChangeBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Log In
     * @param {module:model/Credentials} credentials Authorization data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Token} and HTTP response
     */
    v1UsersLoginWithHttpInfo(credentials) {
      let postBody = credentials;
      // verify the required parameter 'credentials' is set
      if (credentials === undefined || credentials === null) {
        throw new Error("Missing the required parameter 'credentials' when calling v1UsersLogin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Token;
      return this.apiClient.callApi(
        '/v1/users/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Log In
     * @param {module:model/Credentials} credentials Authorization data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Token}
     */
    v1UsersLogin(credentials) {
      return this.v1UsersLoginWithHttpInfo(credentials)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve the list of allowed domains for all Webplayer sessions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1WebPlayerAllowedDomainsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/webplayer/allowedDomains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve the list of allowed domains for all Webplayer sessions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1WebPlayerAllowedDomains() {
      return this.v1WebPlayerAllowedDomainsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new Webplayer Session
     * @param {module:model/WebPlayerCreateSessionRequest} webPlayerCreateSessionRequest Request Data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WebPlayerSession} and HTTP response
     */
    v1WebPlayerCreateSessionWithHttpInfo(webPlayerCreateSessionRequest) {
      let postBody = webPlayerCreateSessionRequest;
      // verify the required parameter 'webPlayerCreateSessionRequest' is set
      if (webPlayerCreateSessionRequest === undefined || webPlayerCreateSessionRequest === null) {
        throw new Error("Missing the required parameter 'webPlayerCreateSessionRequest' when calling v1WebPlayerCreateSession");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebPlayerSession;
      return this.apiClient.callApi(
        '/v1/webplayer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new Webplayer Session
     * @param {module:model/WebPlayerCreateSessionRequest} webPlayerCreateSessionRequest Request Data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WebPlayerSession}
     */
    v1WebPlayerCreateSession(webPlayerCreateSessionRequest) {
      return this.v1WebPlayerCreateSessionWithHttpInfo(webPlayerCreateSessionRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Tear down a Webplayer Session
     * @param {String} sessionId Webplayer Session identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1WebPlayerDestroySessionWithHttpInfo(sessionId) {
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling v1WebPlayerDestroySession");
      }

      let pathParams = {
        'sessionId': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/webplayer/{sessionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Tear down a Webplayer Session
     * @param {String} sessionId Webplayer Session identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1WebPlayerDestroySession(sessionId) {
      return this.v1WebPlayerDestroySessionWithHttpInfo(sessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all Webplayer sessions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/WebPlayerSession>} and HTTP response
     */
    v1WebPlayerListSessionsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WebPlayerSession];
      return this.apiClient.callApi(
        '/v1/webplayer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all Webplayer sessions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/WebPlayerSession>}
     */
    v1WebPlayerListSessions() {
      return this.v1WebPlayerListSessionsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Webplayer Session Information
     * @param {String} sessionId Webplayer Session identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WebPlayerSession} and HTTP response
     */
    v1WebPlayerSessionInfoWithHttpInfo(sessionId) {
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling v1WebPlayerSessionInfo");
      }

      let pathParams = {
        'sessionId': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebPlayerSession;
      return this.apiClient.callApi(
        '/v1/webplayer/{sessionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Webplayer Session Information
     * @param {String} sessionId Webplayer Session identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WebPlayerSession}
     */
    v1WebPlayerSessionInfo(sessionId) {
      return this.v1WebPlayerSessionInfoWithHttpInfo(sessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Recommended SSH Command for Quick Connect
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    v2GetInstanceQuickConnectCommandWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v2GetInstanceQuickConnectCommand");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v2/instances/{instanceId}/quickConnectCommand', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Recommended SSH Command for Quick Connect
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    v2GetInstanceQuickConnectCommand(instanceId) {
      return this.v2GetInstanceQuickConnectCommandWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get state of Instance
     * @param {String} instanceId Instance ID - uuid
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [returnAttr] The attributes to return.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstanceState} and HTTP response
     */
    v2GetInstanceStateWithHttpInfo(instanceId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v2GetInstanceState");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
        'returnAttr': this.apiClient.buildCollectionParam(opts['returnAttr'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceState;
      return this.apiClient.callApi(
        '/v2/instances/{instanceId}/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get state of Instance
     * @param {String} instanceId Instance ID - uuid
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.returnAttr The attributes to return.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstanceState}
     */
    v2GetInstanceState(instanceId, opts) {
      return this.v2GetInstanceStateWithHttpInfo(instanceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}

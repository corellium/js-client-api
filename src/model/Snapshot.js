/**
 * Corellium API
 * REST API to manage your virtual devices.
 *
 * The version of the OpenAPI document: 7.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SnapshotSharing from './SnapshotSharing';
import SnapshotStatus from './SnapshotStatus';

/**
 * The Snapshot model module.
 * @module model/Snapshot
 * @version 0.4.1
 */
class Snapshot {
    /**
     * Constructs a new <code>Snapshot</code>.
     * 
     * @alias module:model/Snapshot
     * @param id {String} Snapshot ID
     * @param name {String} Snapshot name
     * @param instance {String} Instance that this snapshot is of
     * @param status {module:model/SnapshotStatus} 
     * @param date {Number} UNIX Date that the snapshot was created
     * @param fresh {Boolean} 
     * @param live {Boolean} Live snapshot (included state and memory)
     * @param local {Boolean} 
     */
    constructor(id, name, instance, status, date, fresh, live, local) { 
        
        Snapshot.initialize(this, id, name, instance, status, date, fresh, live, local);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, instance, status, date, fresh, live, local) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['instance'] = instance;
        obj['status'] = status;
        obj['date'] = date;
        obj['fresh'] = fresh;
        obj['live'] = live;
        obj['local'] = local;
    }

    /**
     * Constructs a <code>Snapshot</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Snapshot} obj Optional instance to populate.
     * @return {module:model/Snapshot} The populated <code>Snapshot</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Snapshot();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('instance')) {
                obj['instance'] = ApiClient.convertToType(data['instance'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = SnapshotStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Number');
            }
            if (data.hasOwnProperty('fresh')) {
                obj['fresh'] = ApiClient.convertToType(data['fresh'], 'Boolean');
            }
            if (data.hasOwnProperty('live')) {
                obj['live'] = ApiClient.convertToType(data['live'], 'Boolean');
            }
            if (data.hasOwnProperty('local')) {
                obj['local'] = ApiClient.convertToType(data['local'], 'Boolean');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('sharing')) {
                obj['sharing'] = SnapshotSharing.constructFromObject(data['sharing']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Snapshot</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Snapshot</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Snapshot.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['instance'] && !(typeof data['instance'] === 'string' || data['instance'] instanceof String)) {
            throw new Error("Expected the field `instance` to be a primitive type in the JSON string but got " + data['instance']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          SnapshotStatus.validateJSON(data['status']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // validate the optional field `sharing`
        if (data['sharing']) { // data not null
          SnapshotSharing.validateJSON(data['sharing']);
        }

        return true;
    }


}

Snapshot.RequiredProperties = ["id", "name", "instance", "status", "date", "fresh", "live", "local"];

/**
 * Snapshot ID
 * @member {String} id
 */
Snapshot.prototype['id'] = undefined;

/**
 * Snapshot name
 * @member {String} name
 */
Snapshot.prototype['name'] = undefined;

/**
 * Instance that this snapshot is of
 * @member {String} instance
 */
Snapshot.prototype['instance'] = undefined;

/**
 * @member {module:model/SnapshotStatus} status
 */
Snapshot.prototype['status'] = undefined;

/**
 * UNIX Date that the snapshot was created
 * @member {Number} date
 */
Snapshot.prototype['date'] = undefined;

/**
 * 
 * @member {Boolean} fresh
 */
Snapshot.prototype['fresh'] = undefined;

/**
 * Live snapshot (included state and memory)
 * @member {Boolean} live
 */
Snapshot.prototype['live'] = undefined;

/**
 * 
 * @member {Boolean} local
 */
Snapshot.prototype['local'] = undefined;

/**
 * The device model
 * @member {String} model
 */
Snapshot.prototype['model'] = undefined;

/**
 * @member {module:model/SnapshotSharing} sharing
 */
Snapshot.prototype['sharing'] = undefined;






export default Snapshot;


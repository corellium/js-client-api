/**
 * Corellium API
 * REST API to manage your virtual devices.
 *
 * The version of the OpenAPI document: 7.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthProvider from './AuthProvider';
import ConfigResponseMaintenance from './ConfigResponseMaintenance';
import Logging from './Logging';
import Trial from './Trial';

/**
 * The ConfigResponse model module.
 * @module model/ConfigResponse
 * @version 0.4.1
 */
class ConfigResponse {
    /**
     * Constructs a new <code>ConfigResponse</code>.
     * 
     * @alias module:model/ConfigResponse
     */
    constructor() { 
        
        ConfigResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigResponse} obj Optional instance to populate.
     * @return {module:model/ConfigResponse} The populated <code>ConfigResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigResponse();

            if (data.hasOwnProperty('onSite')) {
                obj['onSite'] = ApiClient.convertToType(data['onSite'], 'Boolean');
            }
            if (data.hasOwnProperty('showDomainSettings')) {
                obj['showDomainSettings'] = ApiClient.convertToType(data['showDomainSettings'], 'Boolean');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('invalidBuild')) {
                obj['invalidBuild'] = ApiClient.convertToType(data['invalidBuild'], 'Boolean');
            }
            if (data.hasOwnProperty('sepSim')) {
                obj['sepSim'] = ApiClient.convertToType(data['sepSim'], 'Boolean');
            }
            if (data.hasOwnProperty('installerAvailable')) {
                obj['installerAvailable'] = ApiClient.convertToType(data['installerAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('invoicedPublishableKey')) {
                obj['invoicedPublishableKey'] = ApiClient.convertToType(data['invoicedPublishableKey'], 'String');
            }
            if (data.hasOwnProperty('stripePublicKey')) {
                obj['stripePublicKey'] = ApiClient.convertToType(data['stripePublicKey'], 'String');
            }
            if (data.hasOwnProperty('intercomId')) {
                obj['intercomId'] = ApiClient.convertToType(data['intercomId'], 'String');
            }
            if (data.hasOwnProperty('auxWebhook')) {
                obj['auxWebhook'] = ApiClient.convertToType(data['auxWebhook'], 'String');
            }
            if (data.hasOwnProperty('gtmId')) {
                obj['gtmId'] = ApiClient.convertToType(data['gtmId'], 'String');
            }
            if (data.hasOwnProperty('zapierFeedbackWebhook')) {
                obj['zapierFeedbackWebhook'] = ApiClient.convertToType(data['zapierFeedbackWebhook'], 'String');
            }
            if (data.hasOwnProperty('zapierBugsWebhook')) {
                obj['zapierBugsWebhook'] = ApiClient.convertToType(data['zapierBugsWebhook'], 'String');
            }
            if (data.hasOwnProperty('billingBackend')) {
                obj['billingBackend'] = ApiClient.convertToType(data['billingBackend'], 'String');
            }
            if (data.hasOwnProperty('maintenance')) {
                obj['maintenance'] = ConfigResponseMaintenance.constructFromObject(data['maintenance']);
            }
            if (data.hasOwnProperty('logging')) {
                obj['logging'] = Logging.constructFromObject(data['logging']);
            }
            if (data.hasOwnProperty('cloudAdmin')) {
                obj['cloudAdmin'] = ApiClient.convertToType(data['cloudAdmin'], 'String');
            }
            if (data.hasOwnProperty('filesAdmin')) {
                obj['filesAdmin'] = ApiClient.convertToType(data['filesAdmin'], 'String');
            }
            if (data.hasOwnProperty('cloudDomain')) {
                obj['cloudDomain'] = ApiClient.convertToType(data['cloudDomain'], 'String');
            }
            if (data.hasOwnProperty('billingDomain')) {
                obj['billingDomain'] = ApiClient.convertToType(data['billingDomain'], 'String');
            }
            if (data.hasOwnProperty('appDomain')) {
                obj['appDomain'] = ApiClient.convertToType(data['appDomain'], 'String');
            }
            if (data.hasOwnProperty('maxNetworkMonitorFileSize')) {
                obj['maxNetworkMonitorFileSize'] = ApiClient.convertToType(data['maxNetworkMonitorFileSize'], 'String');
            }
            if (data.hasOwnProperty('enableFirmwareImageUpload')) {
                obj['enableFirmwareImageUpload'] = ApiClient.convertToType(data['enableFirmwareImageUpload'], 'Boolean');
            }
            if (data.hasOwnProperty('authProviders')) {
                obj['authProviders'] = ApiClient.convertToType(data['authProviders'], [AuthProvider]);
            }
            if (data.hasOwnProperty('snapshotLimit')) {
                obj['snapshotLimit'] = ApiClient.convertToType(data['snapshotLimit'], 'Number');
            }
            if (data.hasOwnProperty('maxKernelSize')) {
                obj['maxKernelSize'] = ApiClient.convertToType(data['maxKernelSize'], 'Number');
            }
            if (data.hasOwnProperty('maxRamdiskSize')) {
                obj['maxRamdiskSize'] = ApiClient.convertToType(data['maxRamdiskSize'], 'Number');
            }
            if (data.hasOwnProperty('charmSDK')) {
                obj['charmSDK'] = ApiClient.convertToType(data['charmSDK'], 'String');
            }
            if (data.hasOwnProperty('trial')) {
                obj['trial'] = Trial.constructFromObject(data['trial']);
            }
            if (data.hasOwnProperty('sentryUrl')) {
                obj['sentryUrl'] = ApiClient.convertToType(data['sentryUrl'], 'String');
            }
            if (data.hasOwnProperty('domainAuthenticationProviders')) {
                obj['domainAuthenticationProviders'] = ApiClient.convertToType(data['domainAuthenticationProviders'], 'Boolean');
            }
            if (data.hasOwnProperty('defaultSsid')) {
                obj['defaultSsid'] = ApiClient.convertToType(data['defaultSsid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['invoicedPublishableKey'] && !(typeof data['invoicedPublishableKey'] === 'string' || data['invoicedPublishableKey'] instanceof String)) {
            throw new Error("Expected the field `invoicedPublishableKey` to be a primitive type in the JSON string but got " + data['invoicedPublishableKey']);
        }
        // ensure the json data is a string
        if (data['stripePublicKey'] && !(typeof data['stripePublicKey'] === 'string' || data['stripePublicKey'] instanceof String)) {
            throw new Error("Expected the field `stripePublicKey` to be a primitive type in the JSON string but got " + data['stripePublicKey']);
        }
        // ensure the json data is a string
        if (data['intercomId'] && !(typeof data['intercomId'] === 'string' || data['intercomId'] instanceof String)) {
            throw new Error("Expected the field `intercomId` to be a primitive type in the JSON string but got " + data['intercomId']);
        }
        // ensure the json data is a string
        if (data['auxWebhook'] && !(typeof data['auxWebhook'] === 'string' || data['auxWebhook'] instanceof String)) {
            throw new Error("Expected the field `auxWebhook` to be a primitive type in the JSON string but got " + data['auxWebhook']);
        }
        // ensure the json data is a string
        if (data['gtmId'] && !(typeof data['gtmId'] === 'string' || data['gtmId'] instanceof String)) {
            throw new Error("Expected the field `gtmId` to be a primitive type in the JSON string but got " + data['gtmId']);
        }
        // ensure the json data is a string
        if (data['zapierFeedbackWebhook'] && !(typeof data['zapierFeedbackWebhook'] === 'string' || data['zapierFeedbackWebhook'] instanceof String)) {
            throw new Error("Expected the field `zapierFeedbackWebhook` to be a primitive type in the JSON string but got " + data['zapierFeedbackWebhook']);
        }
        // ensure the json data is a string
        if (data['zapierBugsWebhook'] && !(typeof data['zapierBugsWebhook'] === 'string' || data['zapierBugsWebhook'] instanceof String)) {
            throw new Error("Expected the field `zapierBugsWebhook` to be a primitive type in the JSON string but got " + data['zapierBugsWebhook']);
        }
        // ensure the json data is a string
        if (data['billingBackend'] && !(typeof data['billingBackend'] === 'string' || data['billingBackend'] instanceof String)) {
            throw new Error("Expected the field `billingBackend` to be a primitive type in the JSON string but got " + data['billingBackend']);
        }
        // validate the optional field `maintenance`
        if (data['maintenance']) { // data not null
          ConfigResponseMaintenance.validateJSON(data['maintenance']);
        }
        // validate the optional field `logging`
        if (data['logging']) { // data not null
          Logging.validateJSON(data['logging']);
        }
        // ensure the json data is a string
        if (data['cloudAdmin'] && !(typeof data['cloudAdmin'] === 'string' || data['cloudAdmin'] instanceof String)) {
            throw new Error("Expected the field `cloudAdmin` to be a primitive type in the JSON string but got " + data['cloudAdmin']);
        }
        // ensure the json data is a string
        if (data['filesAdmin'] && !(typeof data['filesAdmin'] === 'string' || data['filesAdmin'] instanceof String)) {
            throw new Error("Expected the field `filesAdmin` to be a primitive type in the JSON string but got " + data['filesAdmin']);
        }
        // ensure the json data is a string
        if (data['cloudDomain'] && !(typeof data['cloudDomain'] === 'string' || data['cloudDomain'] instanceof String)) {
            throw new Error("Expected the field `cloudDomain` to be a primitive type in the JSON string but got " + data['cloudDomain']);
        }
        // ensure the json data is a string
        if (data['billingDomain'] && !(typeof data['billingDomain'] === 'string' || data['billingDomain'] instanceof String)) {
            throw new Error("Expected the field `billingDomain` to be a primitive type in the JSON string but got " + data['billingDomain']);
        }
        // ensure the json data is a string
        if (data['appDomain'] && !(typeof data['appDomain'] === 'string' || data['appDomain'] instanceof String)) {
            throw new Error("Expected the field `appDomain` to be a primitive type in the JSON string but got " + data['appDomain']);
        }
        // ensure the json data is a string
        if (data['maxNetworkMonitorFileSize'] && !(typeof data['maxNetworkMonitorFileSize'] === 'string' || data['maxNetworkMonitorFileSize'] instanceof String)) {
            throw new Error("Expected the field `maxNetworkMonitorFileSize` to be a primitive type in the JSON string but got " + data['maxNetworkMonitorFileSize']);
        }
        if (data['authProviders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['authProviders'])) {
                throw new Error("Expected the field `authProviders` to be an array in the JSON data but got " + data['authProviders']);
            }
            // validate the optional field `authProviders` (array)
            for (const item of data['authProviders']) {
                AuthProvider.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['charmSDK'] && !(typeof data['charmSDK'] === 'string' || data['charmSDK'] instanceof String)) {
            throw new Error("Expected the field `charmSDK` to be a primitive type in the JSON string but got " + data['charmSDK']);
        }
        // validate the optional field `trial`
        if (data['trial']) { // data not null
          Trial.validateJSON(data['trial']);
        }
        // ensure the json data is a string
        if (data['sentryUrl'] && !(typeof data['sentryUrl'] === 'string' || data['sentryUrl'] instanceof String)) {
            throw new Error("Expected the field `sentryUrl` to be a primitive type in the JSON string but got " + data['sentryUrl']);
        }
        // ensure the json data is a string
        if (data['defaultSsid'] && !(typeof data['defaultSsid'] === 'string' || data['defaultSsid'] instanceof String)) {
            throw new Error("Expected the field `defaultSsid` to be a primitive type in the JSON string but got " + data['defaultSsid']);
        }

        return true;
    }


}



/**
 * Denotes whether it's an on-site install
 * @member {Boolean} onSite
 */
ConfigResponse.prototype['onSite'] = undefined;

/**
 * Denotes whether to show domain settings
 * @member {Boolean} showDomainSettings
 */
ConfigResponse.prototype['showDomainSettings'] = undefined;

/**
 * Denotes the version
 * @member {String} version
 */
ConfigResponse.prototype['version'] = undefined;

/**
 * Denotes whether the build is invalid
 * @member {Boolean} invalidBuild
 */
ConfigResponse.prototype['invalidBuild'] = undefined;

/**
 * Denotes whether sepSim is enabled
 * @member {Boolean} sepSim
 */
ConfigResponse.prototype['sepSim'] = undefined;

/**
 * Denotes whether installer is available
 * @member {Boolean} installerAvailable
 */
ConfigResponse.prototype['installerAvailable'] = undefined;

/**
 * API publishable key to use for Invoiced
 * @member {String} invoicedPublishableKey
 */
ConfigResponse.prototype['invoicedPublishableKey'] = undefined;

/**
 * Stripe public key
 * @member {String} stripePublicKey
 */
ConfigResponse.prototype['stripePublicKey'] = undefined;

/**
 * Intercom app ID, also known as workspace ID
 * @member {String} intercomId
 */
ConfigResponse.prototype['intercomId'] = undefined;

/**
 * Webhook URL for aux
 * @member {String} auxWebhook
 */
ConfigResponse.prototype['auxWebhook'] = undefined;

/**
 * Google Tag Manager
 * @member {String} gtmId
 */
ConfigResponse.prototype['gtmId'] = undefined;

/**
 * Webhook URL to send feedback into Productboard automatically
 * @member {String} zapierFeedbackWebhook
 */
ConfigResponse.prototype['zapierFeedbackWebhook'] = undefined;

/**
 * Webhook URL to send frontend errors to Jira automatically
 * @member {String} zapierBugsWebhook
 */
ConfigResponse.prototype['zapierBugsWebhook'] = undefined;

/**
 * Default backend billing api name for new subscriptions (e.g. \"stripe\")
 * @member {String} billingBackend
 */
ConfigResponse.prototype['billingBackend'] = undefined;

/**
 * @member {module:model/ConfigResponseMaintenance} maintenance
 */
ConfigResponse.prototype['maintenance'] = undefined;

/**
 * @member {module:model/Logging} logging
 */
ConfigResponse.prototype['logging'] = undefined;

/**
 * URL for cloud admin login
 * @member {String} cloudAdmin
 */
ConfigResponse.prototype['cloudAdmin'] = undefined;

/**
 * URL for files admin login
 * @member {String} filesAdmin
 */
ConfigResponse.prototype['filesAdmin'] = undefined;

/**
 * Cloud domain name (usually corellium.com or staging.corellium.com)
 * @member {String} cloudDomain
 */
ConfigResponse.prototype['cloudDomain'] = undefined;

/**
 * Billing domain name
 * @member {String} billingDomain
 */
ConfigResponse.prototype['billingDomain'] = undefined;

/**
 * App domain name (usually app.corellium.com or app.staging.corellium.com)
 * @member {String} appDomain
 */
ConfigResponse.prototype['appDomain'] = undefined;

/**
 * Maximum network monitor file size
 * @member {String} maxNetworkMonitorFileSize
 */
ConfigResponse.prototype['maxNetworkMonitorFileSize'] = undefined;

/**
 * Denotes whether users can upload firmware images
 * @member {Boolean} enableFirmwareImageUpload
 */
ConfigResponse.prototype['enableFirmwareImageUpload'] = undefined;

/**
 * Auth providers
 * @member {Array.<module:model/AuthProvider>} authProviders
 */
ConfigResponse.prototype['authProviders'] = undefined;

/**
 * Maximum number of snapshots to allow
 * @member {Number} snapshotLimit
 */
ConfigResponse.prototype['snapshotLimit'] = undefined;

/**
 * The maximum size, in bytes, (default: 100 MB) that an uploaded kernel should be
 * @member {Number} maxKernelSize
 */
ConfigResponse.prototype['maxKernelSize'] = undefined;

/**
 * The maximum size, in bytes, (default: 500 MB) that an uploaded ramdisk should be
 * @member {Number} maxRamdiskSize
 */
ConfigResponse.prototype['maxRamdiskSize'] = undefined;

/**
 * Denotes whether charmSDK is enabled
 * @member {String} charmSDK
 */
ConfigResponse.prototype['charmSDK'] = undefined;

/**
 * @member {module:model/Trial} trial
 */
ConfigResponse.prototype['trial'] = undefined;

/**
 * Sentry URL
 * @member {String} sentryUrl
 */
ConfigResponse.prototype['sentryUrl'] = undefined;

/**
 * If enabled, adds the default providers in their current configuration
 * @member {Boolean} domainAuthenticationProviders
 */
ConfigResponse.prototype['domainAuthenticationProviders'] = undefined;

/**
 * The configured Default SSID from /etc/corellium/setup.json
 * @member {String} defaultSsid
 */
ConfigResponse.prototype['defaultSsid'] = undefined;






export default ConfigResponse;

